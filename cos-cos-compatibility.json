{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "x-release": "cos",
    "title": "COS Compatibility S3 API",
    "x-logo": {
      "url": "https://resource-catalog.bluemix.net/static/cache/2461-acb0d10a1725d783/images/uploaded/icons/object-storage.png",
      "backgroundColor": "#FFFFFF"
    },
    "termsOfService": "https://www.ibm.com/software/sla/sladb.nsf/sla/bm-8004-01",
    "contact": {
      "name": "Nicholas Lange",
      "email": "nicholas.lange@ibm.com"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    }
  },
  "externalDocs": {
    "description": "IBM COS",
    "url": "https://cloud.ibm.com/docs/services/cloud-object-storage/"
  },
  "security": [
    {
      "iam": []
    },
    {
      "hmac": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "operationId": "List buckets",
        "description": "Returns a list of all buckets owned by the authenticated sender of the request.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListBucketsOutput"
                }
              }
            }
          }
        }
      }
    },
    "/{Bucket}?": {
      "put": {
        "operationId": "Create a bucket",
        "description": "Creates a new bucket.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBucketOutput"
                }
              }
            }
          },
          "480": {
            "description": "BucketAlreadyExists",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BucketAlreadyExists"
                }
              }
            }
          },
          "481": {
            "description": "BucketAlreadyOwnedByYou",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BucketAlreadyOwnedByYou"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateBucketRequest"
              }
            }
          },
          "required": true
        }
      },
      "get": {
        "operationId": "List objects",
        "description": "Returns some or all (up to 1000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListObjectsOutput"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchBucket",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchBucket"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "MaxKeys",
            "in": "query",
            "description": "Pagination limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "description": "Pagination token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ListObjectsRequest"
              }
            }
          },
          "required": true
        }
      },
      "head": {
        "operationId": "Check a bucket's headers",
        "description": "This operation is useful to determine if a bucket exists and you have permission to access it.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "NoSuchBucket",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchBucket"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-waiters": [
          {
            "delay": 5,
            "operation": "HeadBucket",
            "maxAttempts": 20,
            "acceptors": [
              {
                "expected": 200,
                "matcher": "status",
                "state": "success"
              },
              {
                "expected": 301,
                "matcher": "status",
                "state": "success"
              },
              {
                "expected": 403,
                "matcher": "status",
                "state": "success"
              },
              {
                "expected": 404,
                "matcher": "status",
                "state": "retry"
              }
            ]
          },
          {
            "delay": 5,
            "operation": "HeadBucket",
            "maxAttempts": 20,
            "acceptors": [
              {
                "expected": 404,
                "matcher": "status",
                "state": "success"
              }
            ]
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/HeadBucketRequest"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "operationId": "Delete a bucket.",
        "description": "Deletes the bucket. All objects in the bucket must be deleted before the bucket itself can be deleted.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DeleteBucketRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/{Bucket}/{Key}": {
      "put": {
        "operationId": "Upload an object",
        "description": "Adds an object to a bucket.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutObjectOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PutObjectRequest"
              }
            }
          },
          "required": true
        }
      },
      "get": {
        "operationId": "Download an object",
        "description": "Retrieves objects.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetObjectOutput"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchKey",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchKey"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GetObjectRequest"
              }
            }
          },
          "required": true
        }
      },
      "head": {
        "operationId": "Check an object''s headers",
        "description": "The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/HeadObjectOutput"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchKey",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchKey"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-waiters": [
          {
            "delay": 5,
            "operation": "HeadObject",
            "maxAttempts": 20,
            "acceptors": [
              {
                "expected": 200,
                "matcher": "status",
                "state": "success"
              },
              {
                "expected": 404,
                "matcher": "status",
                "state": "retry"
              }
            ]
          },
          {
            "delay": 5,
            "operation": "HeadObject",
            "maxAttempts": 20,
            "acceptors": [
              {
                "expected": 404,
                "matcher": "status",
                "state": "success"
              }
            ]
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/HeadObjectRequest"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "operationId": "Delete an object",
        "description": "Deletes an object from a bucket.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteObjectOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DeleteObjectRequest"
              }
            }
          },
          "required": true
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://s3.us-south.objectstorage.softlayer.net/"
    }
  ],
  "components": {
    "securitySchemes": {
      "iam": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "IBM Cloud IAM token"
      }
    },
    "schemas": {
      "AcceptRanges": {
        "type": "string"
      },
      "AccessControlPolicy": {
        "type": "object",
        "properties": {
          "Grants": {
            "$ref": "#/components/schemas/Grants",
            "description": "A list of grants."
          },
          "Owner": {
            "$ref": "#/components/schemas/Owner"
          }
        }
      },
      "AccessControlTranslation": {
        "type": "object",
        "required": [
          "Owner"
        ],
        "properties": {
          "Owner": {
            "$ref": "#/components/schemas/OwnerOverride",
            "description": "The override value for the owner of the replica object."
          }
        },
        "description": "Container for information regarding the access control for replicas."
      },
      "AccountId": {
        "type": "string"
      },
      "AllowedHeader": {
        "type": "string"
      },
      "AllowedHeaders": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AllowedHeader"
        },
        "xml": {
          "wrapped": false
        }
      },
      "AllowedMethod": {
        "type": "string"
      },
      "AllowedMethods": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AllowedMethod"
        },
        "xml": {
          "wrapped": false
        }
      },
      "AllowedOrigin": {
        "type": "string"
      },
      "AllowedOrigins": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AllowedOrigin"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Body": {
        "type": "string"
      },
      "Bucket": {
        "type": "object",
        "properties": {
          "Name": {
            "$ref": "#/components/schemas/BucketName",
            "description": "The name of the bucket."
          },
          "CreationDate": {
            "$ref": "#/components/schemas/CreationDate",
            "description": "Date the bucket was created."
          }
        }
      },
      "BucketAlreadyExists": {
        "type": "object",
        "properties": {},
        "description": "The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again."
      },
      "BucketAlreadyOwnedByYou": {
        "type": "object",
        "properties": {}
      },
      "BucketCannedACL": {
        "type": "string",
        "enum": [
          "private",
          "public-read"
        ]
      },
      "BucketLocationConstraint": {
        "type": "string",
        "enum": [
          "us-south-standard",
          "us-south-vault",
          "us-south-cold",
          "us-south-flex"
        ]
      },
      "BucketLogsPermission": {
        "type": "string",
        "enum": [
          "FULL_CONTROL",
          "READ",
          "WRITE"
        ]
      },
      "BucketName": {
        "type": "string"
      },
      "BucketVersioningStatus": {
        "type": "string",
        "enum": [
          "Enabled",
          "Suspended"
        ]
      },
      "Buckets": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Bucket"
        }
      },
      "BytesProcessed": {
        "type": "integer"
      },
      "BytesReturned": {
        "type": "integer"
      },
      "BytesScanned": {
        "type": "integer"
      },
      "CORSRule": {
        "type": "object",
        "required": [
          "AllowedMethods",
          "AllowedOrigins"
        ],
        "properties": {
          "AllowedHeaders": {
            "$ref": "#/components/schemas/AllowedHeaders",
            "description": "Specifies which headers are allowed in a pre-flight OPTIONS request."
          },
          "AllowedMethods": {
            "$ref": "#/components/schemas/AllowedMethods",
            "description": "Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute."
          },
          "AllowedOrigins": {
            "$ref": "#/components/schemas/AllowedOrigins",
            "description": "One or more origins you want customers to be able to access the bucket from."
          },
          "ExposeHeaders": {
            "$ref": "#/components/schemas/ExposeHeaders",
            "description": "One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object)."
          },
          "MaxAgeSeconds": {
            "$ref": "#/components/schemas/MaxAgeSeconds",
            "description": "The time in seconds that your browser is to cache the preflight response for the specified resource."
          }
        }
      },
      "CSVInput": {
        "type": "object",
        "properties": {
          "FileHeaderInfo": {
            "$ref": "#/components/schemas/FileHeaderInfo",
            "description": "Describes the first line of input. Valid values: None, Ignore, Use."
          },
          "Comments": {
            "$ref": "#/components/schemas/Comments",
            "description": "Single character used to indicate a row should be ignored when present at the start of a row."
          },
          "QuoteEscapeCharacter": {
            "$ref": "#/components/schemas/QuoteEscapeCharacter",
            "description": "Single character used for escaping the quote character inside an already escaped value."
          },
          "RecordDelimiter": {
            "$ref": "#/components/schemas/RecordDelimiter",
            "description": "Value used to separate individual records."
          },
          "FieldDelimiter": {
            "$ref": "#/components/schemas/FieldDelimiter",
            "description": "Value used to separate individual fields in a record."
          },
          "QuoteCharacter": {
            "$ref": "#/components/schemas/QuoteCharacter",
            "description": "Value used for escaping where the field delimiter is part of the value."
          }
        },
        "description": "Describes how a CSV-formatted input object is formatted."
      },
      "CSVOutput": {
        "type": "object",
        "properties": {
          "QuoteFields": {
            "$ref": "#/components/schemas/QuoteFields",
            "description": "Indicates whether or not all output fields should be quoted."
          },
          "QuoteEscapeCharacter": {
            "$ref": "#/components/schemas/QuoteEscapeCharacter",
            "description": "Single character used for escaping the quote character inside an already escaped value."
          },
          "RecordDelimiter": {
            "$ref": "#/components/schemas/RecordDelimiter",
            "description": "Value used to separate individual records."
          },
          "FieldDelimiter": {
            "$ref": "#/components/schemas/FieldDelimiter",
            "description": "Value used to separate individual fields in a record."
          },
          "QuoteCharacter": {
            "$ref": "#/components/schemas/QuoteCharacter",
            "description": "Value used for escaping where the field delimiter is part of the value."
          }
        },
        "description": "Describes how CSV-formatted results are formatted."
      },
      "CacheControl": {
        "type": "string"
      },
      "Code": {
        "type": "string"
      },
      "Comments": {
        "type": "string"
      },
      "CommonPrefix": {
        "type": "object",
        "properties": {
          "Prefix": {
            "$ref": "#/components/schemas/Prefix"
          }
        }
      },
      "CommonPrefixList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CommonPrefix"
        },
        "xml": {
          "wrapped": false
        }
      },
      "CompleteMultipartUploadOutput": {
        "type": "object",
        "example": {
          "Bucket": "acexamplebucket",
          "ETag": "\"4d9031c7644d8081c2829f4ea23c55f7-2\"",
          "Key": "bigobject",
          "Location": "https://examplebucket.s3.amazonaws.com/bigobject"
        },
        "properties": {
          "Location": {
            "$ref": "#/components/schemas/Location"
          },
          "Bucket": {
            "$ref": "#/components/schemas/BucketName"
          },
          "Key": {
            "$ref": "#/components/schemas/ObjectKey"
          },
          "ETag": {
            "$ref": "#/components/schemas/ETag",
            "description": "Entity tag of the object."
          }
        }
      },
      "CompleteMultipartUploadRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "bigobject",
          "MultipartUpload": {
            "Parts": [
              {
                "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
                "PartNumber": "1"
              },
              {
                "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
                "PartNumber": "2"
              }
            ]
          },
          "UploadId": "7YPBOJuoFiQ9cz4P3Pe6FIZwO4f7wN93uHsNBEw97pl5eNwzExg0LAT2dUN91cOmrEQHDsP3WA60CEg--"
        },
        "properties": {
          "MultipartUpload": {
            "$ref": "#/components/schemas/CompletedMultipartUpload"
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "CompletedMultipartUpload": {
        "type": "object",
        "properties": {
          "Parts": {
            "$ref": "#/components/schemas/CompletedPartList"
          }
        }
      },
      "CompletedPart": {
        "type": "object",
        "properties": {
          "ETag": {
            "$ref": "#/components/schemas/ETag",
            "description": "Entity tag returned when the part was uploaded."
          },
          "PartNumber": {
            "$ref": "#/components/schemas/PartNumber",
            "description": "Part number that identifies the part. This is a positive integer between 1 and 10,000."
          }
        }
      },
      "CompletedPartList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CompletedPart"
        },
        "xml": {
          "wrapped": false
        }
      },
      "CompressionType": {
        "type": "string",
        "enum": [
          "NONE",
          "GZIP"
        ]
      },
      "Condition": {
        "type": "object",
        "properties": {
          "HttpErrorCodeReturnedEquals": {
            "$ref": "#/components/schemas/HttpErrorCodeReturnedEquals",
            "description": "The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied."
          },
          "KeyPrefixEquals": {
            "$ref": "#/components/schemas/KeyPrefixEquals",
            "description": "The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied."
          }
        }
      },
      "ConfirmRemoveSelfBucketAccess": {
        "type": "boolean"
      },
      "ContentDisposition": {
        "type": "string"
      },
      "ContentEncoding": {
        "type": "string"
      },
      "ContentLanguage": {
        "type": "string"
      },
      "ContentLength": {
        "type": "integer"
      },
      "ContentMD5": {
        "type": "string"
      },
      "ContentRange": {
        "type": "string"
      },
      "ContentType": {
        "type": "string"
      },
      "ContinuationEvent": {
        "type": "object",
        "properties": {}
      },
      "CopyObjectOutput": {
        "type": "object",
        "example": {
          "CopyObjectResult": {
            "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
            "LastModified": "2016-12-15T17:38:53.000Z"
          }
        },
        "properties": {
          "CopyObjectResult": {
            "$ref": "#/components/schemas/CopyObjectResult"
          }
        }
      },
      "CopyObjectRequest": {
        "type": "object",
        "example": {
          "Bucket": "destinationbucket",
          "CopySource": "/sourcebucket/HappyFacejpg",
          "Key": "HappyFaceCopyjpg"
        },
        "properties": {}
      },
      "CopyObjectResult": {
        "type": "object",
        "properties": {
          "ETag": {
            "$ref": "#/components/schemas/ETag"
          },
          "LastModified": {
            "$ref": "#/components/schemas/LastModified"
          }
        }
      },
      "CopyPartResult": {
        "type": "object",
        "properties": {
          "ETag": {
            "$ref": "#/components/schemas/ETag",
            "description": "Entity tag of the object."
          },
          "LastModified": {
            "$ref": "#/components/schemas/LastModified",
            "description": "Date and time at which the object was uploaded."
          }
        }
      },
      "CopySource": {
        "type": "string",
        "pattern": "\\/.+\\/.+"
      },
      "CopySourceIfMatch": {
        "type": "string"
      },
      "CopySourceIfModifiedSince": {
        "type": "string",
        "format": "date-time"
      },
      "CopySourceIfNoneMatch": {
        "type": "string"
      },
      "CopySourceIfUnmodifiedSince": {
        "type": "string",
        "format": "date-time"
      },
      "CopySourceRange": {
        "type": "string"
      },
      "CopySourceSSECustomerAlgorithm": {
        "type": "string"
      },
      "CopySourceSSECustomerKey": {
        "type": "string",
        "format": "password"
      },
      "CopySourceSSECustomerKeyMD5": {
        "type": "string"
      },
      "CopySourceVersionId": {
        "type": "string"
      },
      "CreateBucketConfiguration": {
        "type": "object",
        "properties": {
          "LocationConstraint": {
            "$ref": "#/components/schemas/BucketLocationConstraint",
            "description": "Specifies the storage class for the bucket. If you don't specify a code, the bucket will be created in Standard."
          }
        }
      },
      "CreateBucketOutput": {
        "type": "object",
        "example": {
          "Location": "/examplebucket"
        },
        "properties": {}
      },
      "CreateBucketRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket"
        },
        "properties": {
          "CreateBucketConfiguration": {
            "$ref": "#/components/schemas/CreateBucketConfiguration"
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "CreateMultipartUploadOutput": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "largeobject",
          "UploadId": "ibZBv_75gd9r8lH_gqXatLdxMVpAlj6ZQjEs.OwyF3953YdwbcQnMA2BLGn8Lx12fQNICtMw5KyteFeHw.Sjng--"
        },
        "properties": {
          "Bucket": {
            "$ref": "#/components/schemas/BucketName",
            "description": "Name of the bucket to which the multipart upload was initiated."
          },
          "Key": {
            "$ref": "#/components/schemas/ObjectKey",
            "description": "Object key for which the multipart upload was initiated."
          },
          "UploadId": {
            "$ref": "#/components/schemas/MultipartUploadId",
            "description": "ID for the initiated multipart upload."
          }
        }
      },
      "CreateMultipartUploadRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "largeobject"
        },
        "properties": {}
      },
      "CreationDate": {
        "type": "string",
        "format": "date-time"
      },
      "Date": {
        "type": "string",
        "format": "date-time"
      },
      "Days": {
        "type": "integer"
      },
      "DaysAfterInitiation": {
        "type": "integer"
      },
      "Delete": {
        "type": "object",
        "required": [
          "Objects"
        ],
        "properties": {
          "Objects": {
            "$ref": "#/components/schemas/ObjectIdentifierList"
          },
          "Quiet": {
            "$ref": "#/components/schemas/Quiet",
            "description": "Element to enable quiet mode for the request. When you add this element, you must set its value to true."
          }
        }
      },
      "DeleteBucketRequest": {
        "type": "object",
        "example": {
          "Bucket": "forrandall2"
        },
        "properties": {}
      },
      "DeleteObjectOutput": {
        "type": "object",
        "example": {},
        "properties": {}
      },
      "DeleteObjectRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "objectkey.jpg"
        },
        "properties": {}
      },
      "DeleteObjectsOutput": {
        "type": "object",
        "example": {
          "Deleted": {
            "Key": "objectkey1",
            "Key2": "objectkey2"
          }
        },
        "properties": {
          "Deleted": {
            "$ref": "#/components/schemas/DeletedObjects"
          },
          "Errors": {
            "$ref": "#/components/schemas/Errors"
          }
        }
      },
      "DeleteObjectsRequest": {
        "type": "object",
        "required": [
          "Delete"
        ],
        "example": {
          "Bucket": "examplebucket",
          "Delete": {
            "Objects": [
              {
                "Key": "objectkey1"
              },
              {
                "Key": "objectkey2"
              }
            ],
            "Quiet": false
          }
        },
        "properties": {
          "Delete": {
            "$ref": "#/components/schemas/Delete"
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "DeletedObject": {
        "type": "object",
        "properties": {
          "Key": {
            "$ref": "#/components/schemas/ObjectKey"
          }
        }
      },
      "DeletedObjects": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeletedObject"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Delimiter": {
        "type": "string"
      },
      "Description": {
        "type": "string"
      },
      "Destination": {
        "type": "object",
        "required": [
          "Bucket"
        ],
        "properties": {
          "Bucket": {
            "$ref": "#/components/schemas/BucketName",
            "description": "Amazon resource name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule."
          },
          "Account": {
            "$ref": "#/components/schemas/AccountId",
            "description": "Account ID of the destination bucket. Currently this is only being verified if Access Control Translation is enabled"
          },
          "StorageClass": {
            "$ref": "#/components/schemas/StorageClass",
            "description": "The class of storage used to store the object."
          },
          "AccessControlTranslation": {
            "$ref": "#/components/schemas/AccessControlTranslation",
            "description": "Container for information regarding the access control for replicas."
          },
          "EncryptionConfiguration": {
            "$ref": "#/components/schemas/EncryptionConfiguration",
            "description": "Container for information regarding encryption based configuration for replicas."
          }
        },
        "description": "Container for replication destination information."
      },
      "DisplayName": {
        "type": "string"
      },
      "ETag": {
        "type": "string"
      },
      "EmailAddress": {
        "type": "string"
      },
      "EnableRequestProgress": {
        "type": "boolean"
      },
      "EncodingType": {
        "type": "string",
        "enum": [
          "url"
        ],
        "description": "Encodes the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to encode the keys in the response."
      },
      "Encryption": {
        "type": "object",
        "required": [
          "EncryptionType"
        ],
        "properties": {
          "EncryptionType": {
            "$ref": "#/components/schemas/ServerSideEncryption",
            "description": "The server-side encryption algorithm used."
          },
          "KMSKeyId": {
            "$ref": "#/components/schemas/SSEKMSKeyId",
            "description": "If the encryption type is aws:kms, this optional value specifies the AWS KMS key ID to use for encryption of job results."
          },
          "KMSContext": {
            "$ref": "#/components/schemas/KMSContext",
            "description": "If the encryption type is aws:kms, this optional value can be used to specify the encryption context for the restore results."
          }
        },
        "description": "Describes the server-side encryption that will be applied to the restore results."
      },
      "EncryptionConfiguration": {
        "type": "object",
        "properties": {
          "ReplicaKmsKeyID": {
            "$ref": "#/components/schemas/ReplicaKmsKeyID",
            "description": "The id of the KMS key used to encrypt the replica object."
          }
        },
        "description": "Container for information regarding encryption based configuration for replicas."
      },
      "EndEvent": {
        "type": "object",
        "properties": {}
      },
      "Error": {
        "type": "object",
        "properties": {
          "Key": {
            "$ref": "#/components/schemas/ObjectKey"
          },
          "Code": {
            "$ref": "#/components/schemas/Code"
          },
          "Message": {
            "$ref": "#/components/schemas/Message"
          }
        }
      },
      "ErrorDocument": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "$ref": "#/components/schemas/ObjectKey",
            "description": "The object key name to use when a 4XX class error occurs."
          }
        }
      },
      "Errors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Error"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Event": {
        "type": "string",
        "enum": [
          "s3:ReducedRedundancyLostObject",
          "s3:ObjectCreated:*",
          "s3:ObjectCreated:Put",
          "s3:ObjectCreated:Post",
          "s3:ObjectCreated:Copy",
          "s3:ObjectCreated:CompleteMultipartUpload",
          "s3:ObjectRemoved:*",
          "s3:ObjectRemoved:Delete",
          "s3:ObjectRemoved:DeleteMarkerCreated"
        ],
        "description": "Bucket event for which to send notifications."
      },
      "EventList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Event"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Expiration": {
        "type": "string"
      },
      "ExpirationStatus": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ]
      },
      "ExpiredObjectDeleteMarker": {
        "type": "boolean"
      },
      "Expires": {
        "type": "string",
        "format": "date-time"
      },
      "ExposeHeader": {
        "type": "string"
      },
      "ExposeHeaders": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ExposeHeader"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Expression": {
        "type": "string"
      },
      "ExpressionType": {
        "type": "string",
        "enum": [
          "SQL"
        ]
      },
      "FetchOwner": {
        "type": "boolean"
      },
      "FieldDelimiter": {
        "type": "string"
      },
      "FileHeaderInfo": {
        "type": "string",
        "enum": [
          "USE",
          "IGNORE",
          "NONE"
        ]
      },
      "FilterRule": {
        "type": "object",
        "properties": {
          "Name": {
            "$ref": "#/components/schemas/FilterRuleName",
            "description": "Object key name prefix or suffix identifying one or more objects to which the filtering rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, go to Configuring Event Notifications in the Amazon Simple Storage Service Developer Guide."
          },
          "Value": {
            "$ref": "#/components/schemas/FilterRuleValue"
          }
        },
        "description": "Container for key value pair that defines the criteria for the filter rule."
      },
      "FilterRuleList": {
        "type": "array",
        "description": "A list of containers for key value pair that defines the criteria for the filter rule.",
        "items": {
          "$ref": "#/components/schemas/FilterRule"
        },
        "xml": {
          "wrapped": false
        }
      },
      "FilterRuleName": {
        "type": "string",
        "enum": [
          "prefix",
          "suffix"
        ]
      },
      "FilterRuleValue": {
        "type": "string"
      },
      "GetBucketAclOutput": {
        "type": "object",
        "properties": {
          "Owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "Grants": {
            "$ref": "#/components/schemas/Grants",
            "description": "A list of grants."
          }
        }
      },
      "GetBucketAclRequest": {
        "type": "object",
        "properties": {}
      },
      "GetBucketCorsRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket"
        },
        "properties": {}
      },
      "GetBucketLocationOutput": {
        "type": "object",
        "example": {
          "LocationConstraint": "us-south-flex"
        },
        "properties": {
          "LocationConstraint": {
            "$ref": "#/components/schemas/BucketLocationConstraint"
          }
        }
      },
      "GetBucketLocationRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket"
        },
        "properties": {}
      },
      "GetObjectAclOutput": {
        "type": "object",
        "example": {
          "Grants": [
            {
              "Grantee": {
                "DisplayName": "owner-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc",
                "Type": "CanonicalUser"
              },
              "Permission": "WRITE"
            },
            {
              "Grantee": {
                "DisplayName": "owner-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc",
                "Type": "CanonicalUser"
              },
              "Permission": "WRITE_ACP"
            },
            {
              "Grantee": {
                "DisplayName": "owner-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc",
                "Type": "CanonicalUser"
              },
              "Permission": "READ"
            },
            {
              "Grantee": {
                "DisplayName": "owner-display-name",
                "ID": "852b113eexamplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc",
                "Type": "CanonicalUser"
              },
              "Permission": "READ_ACP"
            }
          ],
          "Owner": {
            "DisplayName": "owner-display-name",
            "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
          }
        },
        "properties": {
          "Owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "Grants": {
            "$ref": "#/components/schemas/Grants",
            "description": "A list of grants."
          }
        }
      },
      "GetObjectAclRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "HappyFace.jpg"
        },
        "properties": {}
      },
      "GetObjectOutput": {
        "type": "object",
        "example": {
          "AcceptRanges": "bytes",
          "ContentLength": "10",
          "ContentRange": "bytes 0-9/43",
          "ContentType": "text/plain",
          "ETag": "\"0d94420ffd0bc68cd3d152506b97a9cc\"",
          "LastModified": "Thu, 09 Oct 2014 22:57:28 GMT",
          "Metadata": {},
          "VersionId": "null"
        },
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/Body",
            "description": "Object data."
          }
        }
      },
      "GetObjectRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "SampleFile.txt",
          "Range": "bytes=0-9"
        },
        "properties": {}
      },
      "GlacierJobParameters": {
        "type": "object",
        "required": [
          "Tier"
        ],
        "properties": {
          "Tier": {
            "$ref": "#/components/schemas/Tier",
            "description": "Glacier retrieval tier at which the restore will be processed."
          }
        }
      },
      "Grant": {
        "type": "object",
        "properties": {
          "Grantee": {
            "$ref": "#/components/schemas/Grantee"
          },
          "Permission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Specifies the permission given to the grantee."
          }
        }
      },
      "GrantFullControl": {
        "type": "string"
      },
      "GrantRead": {
        "type": "string"
      },
      "GrantReadACP": {
        "type": "string"
      },
      "GrantWrite": {
        "type": "string"
      },
      "GrantWriteACP": {
        "type": "string"
      },
      "Grantee": {
        "type": "object",
        "required": [
          "Type"
        ],
        "properties": {
          "DisplayName": {
            "$ref": "#/components/schemas/DisplayName",
            "description": "Screen name of the grantee."
          },
          "EmailAddress": {
            "$ref": "#/components/schemas/EmailAddress",
            "description": "Email address of the grantee."
          },
          "ID": {
            "$ref": "#/components/schemas/ID",
            "description": "The canonical user ID of the grantee."
          },
          "Type": {
            "$ref": "#/components/schemas/Type",
            "description": "Type of grantee"
          },
          "URI": {
            "$ref": "#/components/schemas/URI",
            "description": "URI of the grantee group."
          }
        },
        "xml": {
          "namespace": "http://www.w3.org/2001/XMLSchema-instance",
          "attribute": true
        }
      },
      "Grants": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Grant"
        }
      },
      "HeadBucketRequest": {
        "type": "object",
        "example": {
          "Bucket": "acl1"
        },
        "properties": {}
      },
      "HeadObjectOutput": {
        "type": "object",
        "example": {
          "AcceptRanges": "bytes",
          "ContentLength": "3191",
          "ContentType": "image/jpeg",
          "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
          "LastModified": "Thu, 15 Dec 2016 01:19:41 GMT",
          "Metadata": {},
          "VersionId": "null"
        },
        "properties": {}
      },
      "HeadObjectRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "HappyFace.jpg"
        },
        "properties": {}
      },
      "HostName": {
        "type": "string"
      },
      "HttpErrorCodeReturnedEquals": {
        "type": "string"
      },
      "HttpRedirectCode": {
        "type": "string"
      },
      "ID": {
        "type": "string"
      },
      "IfMatch": {
        "type": "string"
      },
      "IfModifiedSince": {
        "type": "string",
        "format": "date-time"
      },
      "IfNoneMatch": {
        "type": "string"
      },
      "IfUnmodifiedSince": {
        "type": "string",
        "format": "date-time"
      },
      "Initiated": {
        "type": "string",
        "format": "date-time"
      },
      "Initiator": {
        "type": "object",
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/ID",
            "description": "If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value."
          },
          "DisplayName": {
            "$ref": "#/components/schemas/DisplayName",
            "description": "Name of the Principal."
          }
        }
      },
      "InputSerialization": {
        "type": "object",
        "properties": {
          "CSV": {
            "$ref": "#/components/schemas/CSVInput",
            "description": "Describes the serialization of a CSV-encoded object."
          },
          "CompressionType": {
            "$ref": "#/components/schemas/CompressionType",
            "description": "Specifies object's compression format. Valid values: NONE, GZIP. Default Value: NONE."
          },
          "JSON": {
            "$ref": "#/components/schemas/JSONInput",
            "description": "Specifies JSON as object's input serialization format."
          }
        },
        "description": "Describes the serialization format of the object."
      },
      "IsEnabled": {
        "type": "boolean"
      },
      "IsLatest": {
        "type": "boolean"
      },
      "IsTruncated": {
        "type": "boolean"
      },
      "JSONInput": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/JSONType",
            "description": "The type of JSON. Valid values: Document, Lines."
          }
        }
      },
      "JSONOutput": {
        "type": "object",
        "properties": {
          "RecordDelimiter": {
            "$ref": "#/components/schemas/RecordDelimiter",
            "description": "The value used to separate individual records in the output."
          }
        }
      },
      "JSONType": {
        "type": "string",
        "enum": [
          "DOCUMENT",
          "LINES"
        ]
      },
      "KMSContext": {
        "type": "string"
      },
      "KeyCount": {
        "type": "integer"
      },
      "KeyMarker": {
        "type": "string"
      },
      "KeyPrefixEquals": {
        "type": "string"
      },
      "LastModified": {
        "type": "string",
        "format": "date-time"
      },
      "ListBucketsOutput": {
        "type": "object",
        "example": {
          "Buckets": [
            {
              "CreationDate": "2012-02-15T21: 03: 02.000Z",
              "Name": "examplebucket"
            },
            {
              "CreationDate": "2011-07-24T19: 33: 50.000Z",
              "Name": "examplebucket2"
            },
            {
              "CreationDate": "2010-12-17T00: 56: 49.000Z",
              "Name": "examplebucket3"
            }
          ],
          "Owner": {
            "DisplayName": "own-display-name",
            "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31"
          }
        },
        "properties": {
          "Buckets": {
            "$ref": "#/components/schemas/Buckets"
          },
          "Owner": {
            "$ref": "#/components/schemas/Owner"
          }
        }
      },
      "ListMultipartUploadsOutput": {
        "type": "object",
        "example": {
          "Bucket": "acl1",
          "IsTruncated": true,
          "KeyMarker": "",
          "MaxUploads": "2",
          "NextKeyMarker": "someobjectkey",
          "NextUploadIdMarker": "examplelo91lv1iwvWpvCiJWugw2xXLPAD7Z8cJyX9.WiIRgNrdG6Ldsn.9FtS63TCl1Uf5faTB.1U5Ckcbmdw--",
          "UploadIdMarker": "",
          "Uploads": [
            {
              "Initiated": "2014-05-01T05:40:58.000Z",
              "Initiator": {
                "DisplayName": "ownder-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Key": "JavaFile",
              "Owner": {
                "DisplayName": "mohanataws",
                "ID": "852b113e7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "StorageClass": "STANDARD",
              "UploadId": "gZ30jIqlUa.CInXklLQtSMJITdUnoZ1Y5GACB5UckOtspm5zbDMCkPF_qkfZzMiFZ6dksmcnqxJyIBvQMG9X9Q--"
            },
            {
              "Initiated": "2014-05-01T05:41:27.000Z",
              "Initiator": {
                "DisplayName": "ownder-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Key": "JavaFile",
              "Owner": {
                "DisplayName": "ownder-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "StorageClass": "STANDARD",
              "UploadId": "b7tZSqIlo91lv1iwvWpvCiJWugw2xXLPAD7Z8cJyX9.WiIRgNrdG6Ldsn.9FtS63TCl1Uf5faTB.1U5Ckcbmdw--"
            }
          ]
        },
        "properties": {
          "Bucket": {
            "$ref": "#/components/schemas/BucketName",
            "description": "Name of the bucket to which the multipart upload was initiated."
          },
          "KeyMarker": {
            "$ref": "#/components/schemas/KeyMarker",
            "description": "The key at or after which the listing began."
          },
          "UploadIdMarker": {
            "$ref": "#/components/schemas/UploadIdMarker",
            "description": "Upload ID after which listing began."
          },
          "NextKeyMarker": {
            "$ref": "#/components/schemas/NextKeyMarker",
            "description": "When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request."
          },
          "Prefix": {
            "$ref": "#/components/schemas/Prefix",
            "description": "When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix."
          },
          "Delimiter": {
            "$ref": "#/components/schemas/Delimiter"
          },
          "NextUploadIdMarker": {
            "$ref": "#/components/schemas/NextUploadIdMarker",
            "description": "When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request."
          },
          "MaxUploads": {
            "$ref": "#/components/schemas/MaxUploads",
            "description": "Maximum number of multipart uploads that could have been included in the response."
          },
          "IsTruncated": {
            "$ref": "#/components/schemas/IsTruncated",
            "description": "Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads."
          },
          "Uploads": {
            "$ref": "#/components/schemas/MultipartUploadList"
          },
          "CommonPrefixes": {
            "$ref": "#/components/schemas/CommonPrefixList"
          },
          "EncodingType": {
            "$ref": "#/components/schemas/EncodingType",
            "description": "Encoding type used by Amazon S3 to encode object keys in the response."
          }
        }
      },
      "ListMultipartUploadsRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "KeyMarker": "nextkeyfrompreviousresponse",
          "MaxUploads": "2",
          "UploadIdMarker": "valuefrompreviousresponse"
        },
        "properties": {}
      },
      "ListObjectsOutput": {
        "type": "object",
        "example": {
          "Contents": [
            {
              "ETag": "\"70ee1738b6b21e2c8a43f3a5ab0eee71\"",
              "Key": "example1.jpg",
              "LastModified": "2014-11-21T19:40:05.000Z",
              "Owner": {
                "DisplayName": "myname",
                "ID": "12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Size": 11,
              "StorageClass": "STANDARD"
            },
            {
              "ETag": "\"9c8af9a76df052144598c115ef33e511\"",
              "Key": "example2.jpg",
              "LastModified": "2013-11-15T01:10:49.000Z",
              "Owner": {
                "DisplayName": "myname",
                "ID": "12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Size": 713193,
              "StorageClass": "STANDARD"
            }
          ],
          "NextMarker": "eyJNYXJrZXIiOiBudWxsLCAiYm90b190cnVuY2F0ZV9hbW91bnQiOiAyfQ=="
        },
        "properties": {
          "IsTruncated": {
            "$ref": "#/components/schemas/IsTruncated",
            "description": "A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria."
          },
          "Marker": {
            "$ref": "#/components/schemas/Marker"
          },
          "NextMarker": {
            "$ref": "#/components/schemas/NextMarker",
            "description": "When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. IBM COS lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys."
          },
          "Contents": {
            "$ref": "#/components/schemas/ObjectList"
          },
          "Name": {
            "$ref": "#/components/schemas/BucketName"
          },
          "Prefix": {
            "$ref": "#/components/schemas/Prefix"
          },
          "Delimiter": {
            "$ref": "#/components/schemas/Delimiter"
          },
          "MaxKeys": {
            "$ref": "#/components/schemas/MaxKeys"
          },
          "CommonPrefixes": {
            "$ref": "#/components/schemas/CommonPrefixList"
          },
          "EncodingType": {
            "$ref": "#/components/schemas/EncodingType",
            "description": "Encoding type used to encode object keys in the response."
          }
        }
      },
      "ListObjectsRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "MaxKeys": "2"
        },
        "properties": {}
      },
      "ListObjectsV2Output": {
        "type": "object",
        "example": {
          "Contents": [
            {
              "ETag": "\"70ee1738b6b21e2c8a43f3a5ab0eee71\"",
              "Key": "happyface.jpg",
              "LastModified": "2014-11-21T19:40:05.000Z",
              "Size": 11,
              "StorageClass": "STANDARD"
            },
            {
              "ETag": "\"becf17f89c30367a9a44495d62ed521a-1\"",
              "Key": "test.jpg",
              "LastModified": "2014-05-02T04:51:50.000Z",
              "Size": 4192256,
              "StorageClass": "STANDARD"
            }
          ],
          "IsTruncated": true,
          "KeyCount": "2",
          "MaxKeys": "2",
          "Name": "examplebucket",
          "NextContinuationToken": "1w41l63U0xa8q7smH50vCxyTQqdxo69O3EmK28Bi5PcROI4wI/EyIJg==",
          "Prefix": ""
        },
        "properties": {
          "IsTruncated": {
            "$ref": "#/components/schemas/IsTruncated",
            "description": "A flag that indicates whether or not IBM COS returned all of the results that satisfied the search criteria."
          },
          "Contents": {
            "$ref": "#/components/schemas/ObjectList",
            "description": "Metadata about each object returned."
          },
          "Name": {
            "$ref": "#/components/schemas/BucketName",
            "description": "Name of the bucket to list."
          },
          "Prefix": {
            "$ref": "#/components/schemas/Prefix",
            "description": "Limits the response to keys that begin with the specified prefix."
          },
          "Delimiter": {
            "$ref": "#/components/schemas/Delimiter",
            "description": "A delimiter is a character you use to group keys."
          },
          "MaxKeys": {
            "$ref": "#/components/schemas/MaxKeys",
            "description": "Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more."
          },
          "CommonPrefixes": {
            "$ref": "#/components/schemas/CommonPrefixList",
            "description": "CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter"
          },
          "EncodingType": {
            "$ref": "#/components/schemas/EncodingType",
            "description": "Encoding type used by IBM COS to encode object keys in the response."
          },
          "KeyCount": {
            "$ref": "#/components/schemas/KeyCount",
            "description": "KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys"
          },
          "ContinuationToken": {
            "$ref": "#/components/schemas/Token",
            "description": "ContinuationToken indicates IBM COS that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key"
          },
          "NextContinuationToken": {
            "$ref": "#/components/schemas/NextToken",
            "description": "NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to IBM COS can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key"
          },
          "StartAfter": {
            "$ref": "#/components/schemas/StartAfter",
            "description": "StartAfter is where you want IBM COS to start listing from. IBM COS starts listing after this specified key. StartAfter can be any key in the bucket"
          }
        }
      },
      "ListObjectsV2Request": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "MaxKeys": "2"
        },
        "properties": {}
      },
      "ListPartsOutput": {
        "type": "object",
        "example": {
          "Initiator": {
            "DisplayName": "owner-display-name",
            "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
          },
          "Owner": {
            "DisplayName": "owner-display-name",
            "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
          },
          "Parts": [
            {
              "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
              "LastModified": "2016-12-16T00:11:42.000Z",
              "PartNumber": "1",
              "Size": 26246026
            },
            {
              "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
              "LastModified": "2016-12-16T00:15:01.000Z",
              "PartNumber": "2",
              "Size": 26246026
            }
          ],
          "StorageClass": "STANDARD"
        },
        "properties": {
          "Bucket": {
            "$ref": "#/components/schemas/BucketName",
            "description": "Name of the bucket to which the multipart upload was initiated."
          },
          "Key": {
            "$ref": "#/components/schemas/ObjectKey",
            "description": "Object key for which the multipart upload was initiated."
          },
          "UploadId": {
            "$ref": "#/components/schemas/MultipartUploadId",
            "description": "Upload ID identifying the multipart upload whose parts are being listed."
          },
          "PartNumberMarker": {
            "$ref": "#/components/schemas/PartNumberMarker",
            "description": "Part number after which listing begins."
          },
          "NextPartNumberMarker": {
            "$ref": "#/components/schemas/NextPartNumberMarker",
            "description": "When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request."
          },
          "MaxParts": {
            "$ref": "#/components/schemas/MaxParts",
            "description": "Maximum number of parts that were allowed in the response."
          },
          "IsTruncated": {
            "$ref": "#/components/schemas/IsTruncated",
            "description": "Indicates whether the returned list of parts is truncated."
          },
          "Parts": {
            "$ref": "#/components/schemas/Parts"
          },
          "Initiator": {
            "$ref": "#/components/schemas/Initiator",
            "description": "Identifies who initiated the multipart upload."
          },
          "Owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "StorageClass": {
            "$ref": "#/components/schemas/StorageClass",
            "description": "The class of storage used to store the object."
          }
        }
      },
      "ListPartsRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "bigobject",
          "UploadId": "example7YPBOJuoFiQ9cz4P3Pe6FIZwO4f7wN93uHsNBEw97pl5eNwzExg0LAT2dUN91cOmrEQHDsP3WA60CEg--"
        },
        "properties": {}
      },
      "Location": {
        "type": "string"
      },
      "LocationPrefix": {
        "type": "string"
      },
      "Marker": {
        "type": "string"
      },
      "MaxAgeSeconds": {
        "type": "integer"
      },
      "MaxKeys": {
        "type": "integer"
      },
      "MaxParts": {
        "type": "integer"
      },
      "MaxUploads": {
        "type": "integer"
      },
      "Message": {
        "type": "string"
      },
      "Metadata": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "$ref": "#/components/schemas/MetadataKey"
            },
            "value": {
              "$ref": "#/components/schemas/MetadataValue"
            }
          }
        }
      },
      "MetadataDirective": {
        "type": "string",
        "enum": [
          "COPY",
          "REPLACE"
        ]
      },
      "MetadataEntry": {
        "type": "object",
        "properties": {
          "Name": {
            "$ref": "#/components/schemas/MetadataKey"
          },
          "Value": {
            "$ref": "#/components/schemas/MetadataValue"
          }
        },
        "description": "A metadata key-value pair to store with an object."
      },
      "MetadataKey": {
        "type": "string"
      },
      "MetadataValue": {
        "type": "string"
      },
      "MissingMeta": {
        "type": "integer"
      },
      "MultipartUpload": {
        "type": "object",
        "properties": {
          "UploadId": {
            "$ref": "#/components/schemas/MultipartUploadId",
            "description": "Upload ID that identifies the multipart upload."
          },
          "Key": {
            "$ref": "#/components/schemas/ObjectKey",
            "description": "Key of the object for which the multipart upload was initiated."
          },
          "Initiated": {
            "$ref": "#/components/schemas/Initiated",
            "description": "Date and time at which the multipart upload was initiated."
          },
          "StorageClass": {
            "$ref": "#/components/schemas/StorageClass",
            "description": "The class of storage used to store the object."
          },
          "Owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "Initiator": {
            "$ref": "#/components/schemas/Initiator",
            "description": "Identifies who initiated the multipart upload."
          }
        }
      },
      "MultipartUploadId": {
        "type": "string"
      },
      "MultipartUploadList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MultipartUpload"
        },
        "xml": {
          "wrapped": false
        }
      },
      "NextKeyMarker": {
        "type": "string"
      },
      "NextMarker": {
        "type": "string"
      },
      "NextPartNumberMarker": {
        "type": "integer"
      },
      "NextToken": {
        "type": "string"
      },
      "NextUploadIdMarker": {
        "type": "string"
      },
      "NextVersionIdMarker": {
        "type": "string"
      },
      "NoSuchBucket": {
        "type": "object",
        "properties": {},
        "description": "The specified bucket does not exist."
      },
      "NoSuchKey": {
        "type": "object",
        "properties": {},
        "description": "The specified key does not exist."
      },
      "NoSuchUpload": {
        "type": "object",
        "properties": {},
        "description": "The specified multipart upload does not exist."
      },
      "Object": {
        "type": "object",
        "properties": {
          "Key": {
            "$ref": "#/components/schemas/ObjectKey"
          },
          "LastModified": {
            "$ref": "#/components/schemas/LastModified"
          },
          "ETag": {
            "$ref": "#/components/schemas/ETag"
          },
          "Size": {
            "$ref": "#/components/schemas/Size"
          },
          "StorageClass": {
            "$ref": "#/components/schemas/ObjectStorageClass",
            "description": "The class of storage used to store the object."
          },
          "Owner": {
            "$ref": "#/components/schemas/Owner"
          }
        }
      },
      "ObjectAlreadyInActiveTierError": {
        "type": "object",
        "properties": {},
        "description": "This operation is not allowed against this storage tier"
      },
      "ObjectCannedACL": {
        "type": "string",
        "enum": [
          "private",
          "public-read"
        ]
      },
      "ObjectIdentifier": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "$ref": "#/components/schemas/ObjectKey",
            "description": "Key name of the object to delete."
          }
        }
      },
      "ObjectIdentifierList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ObjectIdentifier"
        },
        "xml": {
          "wrapped": false
        }
      },
      "ObjectKey": {
        "type": "string",
        "minLength": 1
      },
      "ObjectList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Object"
        },
        "xml": {
          "wrapped": false
        }
      },
      "ObjectNotInActiveTierError": {
        "type": "object",
        "properties": {},
        "description": "The source object of the COPY operation is not in the active tier and is only stored in Amazon Glacier."
      },
      "ObjectStorageClass": {
        "type": "string",
        "enum": [
          "STANDARD",
          "GLACIER"
        ]
      },
      "OutputLocation": {
        "type": "object",
        "properties": {
          "S3": {
            "$ref": "#/components/schemas/S3Location",
            "description": "Describes the location that will receive the results of the restore request."
          }
        },
        "description": "Describes the location where the restore job's output is stored."
      },
      "OutputSerialization": {
        "type": "object",
        "properties": {
          "CSV": {
            "$ref": "#/components/schemas/CSVOutput",
            "description": "Describes the serialization of CSV-encoded Select results."
          },
          "JSON": {
            "$ref": "#/components/schemas/JSONOutput",
            "description": "Specifies JSON as request's output serialization format."
          }
        },
        "description": "Describes how results of the Select job are serialized."
      },
      "Owner": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "ID": {
            "$ref": "#/components/schemas/ID"
          }
        }
      },
      "OwnerOverride": {
        "type": "string",
        "enum": [
          "Destination"
        ]
      },
      "Part": {
        "type": "object",
        "properties": {
          "PartNumber": {
            "$ref": "#/components/schemas/PartNumber",
            "description": "Part number identifying the part. This is a positive integer between 1 and 10,000."
          },
          "LastModified": {
            "$ref": "#/components/schemas/LastModified",
            "description": "Date and time at which the part was uploaded."
          },
          "ETag": {
            "$ref": "#/components/schemas/ETag",
            "description": "Entity tag returned when the part was uploaded."
          },
          "Size": {
            "$ref": "#/components/schemas/Size",
            "description": "Size of the uploaded part data."
          }
        }
      },
      "PartNumber": {
        "type": "integer"
      },
      "PartNumberMarker": {
        "type": "integer"
      },
      "Parts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Part"
        },
        "xml": {
          "wrapped": false
        }
      },
      "PartsCount": {
        "type": "integer"
      },
      "Permission": {
        "type": "string",
        "enum": [
          "FULL_CONTROL",
          "READ"
        ]
      },
      "Policy": {
        "type": "string"
      },
      "Prefix": {
        "type": "string"
      },
      "Progress": {
        "type": "object",
        "properties": {
          "BytesScanned": {
            "$ref": "#/components/schemas/BytesScanned",
            "description": "Current number of object bytes scanned."
          },
          "BytesProcessed": {
            "$ref": "#/components/schemas/BytesProcessed",
            "description": "Current number of uncompressed object bytes processed."
          },
          "BytesReturned": {
            "$ref": "#/components/schemas/BytesReturned",
            "description": "Current number of bytes of records payload data returned."
          }
        }
      },
      "ProgressEvent": {
        "type": "object",
        "properties": {
          "Details": {
            "$ref": "#/components/schemas/Progress",
            "description": "The Progress event details."
          }
        }
      },
      "Protocol": {
        "type": "string",
        "enum": [
          "http",
          "https"
        ]
      },
      "PutBucketAclRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "GrantFullControl": "id=examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484",
          "GrantWrite": "uri=http://acs.amazonaws.com/groups/s3/LogDelivery"
        },
        "properties": {
          "AccessControlPolicy": {
            "$ref": "#/components/schemas/AccessControlPolicy"
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "PutObjectAclOutput": {
        "type": "object",
        "example": {},
        "properties": {}
      },
      "PutObjectAclRequest": {
        "type": "object",
        "example": {
          "AccessControlPolicy": {},
          "Bucket": "examplebucket",
          "GrantFullControl": "emailaddress=user1@example.com,emailaddress=user2@example.com",
          "GrantRead": "uri=http://acs.amazonaws.com/groups/global/AllUsers",
          "Key": "HappyFace.jpg"
        },
        "properties": {
          "AccessControlPolicy": {
            "$ref": "#/components/schemas/AccessControlPolicy"
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "PutObjectOutput": {
        "type": "object",
        "example": {
          "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
          "ServerSideEncryption": "AES256",
          "VersionId": "CG612hodqujkf8FaaNfp8U..FIhLROcp"
        },
        "properties": {}
      },
      "PutObjectRequest": {
        "type": "object",
        "example": {
          "Body": "HappyFace.jpg",
          "Bucket": "examplebucket",
          "Key": "HappyFace.jpg",
          "StorageClass": "STANDARD"
        },
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/Body",
            "description": "Object data."
          }
        }
      },
      "Quiet": {
        "type": "boolean"
      },
      "QuoteCharacter": {
        "type": "string"
      },
      "QuoteEscapeCharacter": {
        "type": "string"
      },
      "QuoteFields": {
        "type": "string",
        "enum": [
          "ALWAYS",
          "ASNEEDED"
        ]
      },
      "Range": {
        "type": "string"
      },
      "RecordDelimiter": {
        "type": "string"
      },
      "RecordsEvent": {
        "type": "object",
        "properties": {
          "Payload": {
            "$ref": "#/components/schemas/Body",
            "description": "The byte array of partial, one or more result records."
          }
        }
      },
      "Redirect": {
        "type": "object",
        "properties": {
          "HostName": {
            "$ref": "#/components/schemas/HostName",
            "description": "The host name to use in the redirect request."
          },
          "HttpRedirectCode": {
            "$ref": "#/components/schemas/HttpRedirectCode",
            "description": "The HTTP redirect code to use on the response. Not required if one of the siblings is present."
          },
          "Protocol": {
            "$ref": "#/components/schemas/Protocol",
            "description": "Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request."
          },
          "ReplaceKeyPrefixWith": {
            "$ref": "#/components/schemas/ReplaceKeyPrefixWith",
            "description": "The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided."
          },
          "ReplaceKeyWith": {
            "$ref": "#/components/schemas/ReplaceKeyWith",
            "description": "The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided."
          }
        }
      },
      "RedirectAllRequestsTo": {
        "type": "object",
        "required": [
          "HostName"
        ],
        "properties": {
          "HostName": {
            "$ref": "#/components/schemas/HostName",
            "description": "Name of the host where requests will be redirected."
          },
          "Protocol": {
            "$ref": "#/components/schemas/Protocol",
            "description": "Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request."
          }
        }
      },
      "ReplaceKeyPrefixWith": {
        "type": "string"
      },
      "ReplaceKeyWith": {
        "type": "string"
      },
      "ReplicaKmsKeyID": {
        "type": "string"
      },
      "ReplicationConfiguration": {
        "type": "object",
        "required": [
          "Role",
          "Rules"
        ],
        "properties": {
          "Role": {
            "$ref": "#/components/schemas/Role",
            "description": "Amazon Resource Name (ARN) of an IAM role for Amazon S3 to assume when replicating the objects."
          },
          "Rules": {
            "$ref": "#/components/schemas/ReplicationRules",
            "description": "Container for information about a particular replication rule. Replication configuration must have at least one rule and can contain up to 1,000 rules."
          }
        },
        "description": "Container for replication rules. You can add as many as 1,000 rules. Total replication configuration size can be up to 2 MB."
      },
      "ReplicationRule": {
        "type": "object",
        "required": [
          "Prefix",
          "Status",
          "Destination"
        ],
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/ID",
            "description": "Unique identifier for the rule. The value cannot be longer than 255 characters."
          },
          "Prefix": {
            "$ref": "#/components/schemas/Prefix",
            "description": "Object keyname prefix identifying one or more objects to which the rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes are not supported."
          },
          "Status": {
            "$ref": "#/components/schemas/ReplicationRuleStatus",
            "description": "The rule is ignored if status is not Enabled."
          },
          "SourceSelectionCriteria": {
            "$ref": "#/components/schemas/SourceSelectionCriteria",
            "description": "Container for filters that define which source objects should be replicated."
          },
          "Destination": {
            "$ref": "#/components/schemas/Destination",
            "description": "Container for replication destination information."
          }
        },
        "description": "Container for information about a particular replication rule."
      },
      "ReplicationRuleStatus": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ]
      },
      "ReplicationRules": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ReplicationRule"
        },
        "xml": {
          "wrapped": false
        }
      },
      "ReplicationStatus": {
        "type": "string",
        "enum": [
          "COMPLETE",
          "PENDING",
          "FAILED",
          "REPLICA"
        ]
      },
      "RequestCharged": {
        "type": "string",
        "enum": [
          "requester"
        ],
        "description": "If present, indicates that the requester was successfully charged for the request."
      },
      "RequestProgress": {
        "type": "object",
        "properties": {
          "Enabled": {
            "$ref": "#/components/schemas/EnableRequestProgress",
            "description": "Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE, FALSE. Default value: FALSE."
          }
        }
      },
      "ResponseCacheControl": {
        "type": "string"
      },
      "ResponseContentDisposition": {
        "type": "string"
      },
      "ResponseContentEncoding": {
        "type": "string"
      },
      "ResponseContentLanguage": {
        "type": "string"
      },
      "ResponseContentType": {
        "type": "string"
      },
      "ResponseExpires": {
        "type": "string",
        "format": "date-time"
      },
      "Restore": {
        "type": "string"
      },
      "RestoreObjectOutput": {
        "type": "object",
        "example": {},
        "properties": {}
      },
      "RestoreObjectRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "archivedobjectkey",
          "RestoreRequest": {
            "Days": 1,
            "GlacierJobParameters": {
              "Tier": "Expedited"
            }
          }
        },
        "properties": {
          "RestoreRequest": {
            "$ref": "#/components/schemas/RestoreRequest"
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "RestoreOutputPath": {
        "type": "string"
      },
      "RestoreRequest": {
        "type": "object",
        "properties": {
          "Days": {
            "$ref": "#/components/schemas/Days",
            "description": "Lifetime of the active copy in days. Do not use with restores that specify OutputLocation."
          },
          "GlacierJobParameters": {
            "$ref": "#/components/schemas/GlacierJobParameters",
            "description": "Glacier related parameters pertaining to this job. Do not use with restores that specify OutputLocation."
          },
          "Type": {
            "$ref": "#/components/schemas/RestoreRequestType",
            "description": "Type of restore request."
          },
          "Tier": {
            "$ref": "#/components/schemas/Tier",
            "description": "Glacier retrieval tier at which the restore will be processed."
          },
          "Description": {
            "$ref": "#/components/schemas/Description",
            "description": "The optional description for the job."
          },
          "OutputLocation": {
            "$ref": "#/components/schemas/OutputLocation",
            "description": "Describes the location where the restore job's output is stored."
          }
        },
        "description": "Container for restore job parameters."
      },
      "RestoreRequestType": {
        "type": "string",
        "enum": [
          "SELECT"
        ]
      },
      "Role": {
        "type": "string"
      },
      "RoutingRule": {
        "type": "object",
        "required": [
          "Redirect"
        ],
        "properties": {
          "Condition": {
            "$ref": "#/components/schemas/Condition",
            "description": "A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error."
          },
          "Redirect": {
            "$ref": "#/components/schemas/Redirect",
            "description": "Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return."
          }
        }
      },
      "RoutingRules": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RoutingRule"
        }
      },
      "S3KeyFilter": {
        "type": "object",
        "properties": {
          "FilterRules": {
            "$ref": "#/components/schemas/FilterRuleList"
          }
        },
        "description": "Container for object key name prefix and suffix filtering rules."
      },
      "S3Location": {
        "type": "object",
        "required": [
          "BucketName",
          "Prefix"
        ],
        "properties": {
          "BucketName": {
            "$ref": "#/components/schemas/BucketName",
            "description": "The name of the bucket where the restore results will be placed."
          },
          "Prefix": {
            "$ref": "#/components/schemas/LocationPrefix",
            "description": "The prefix that is prepended to the restore results for this request."
          },
          "Encryption": {
            "$ref": "#/components/schemas/Encryption"
          },
          "CannedACL": {
            "$ref": "#/components/schemas/ObjectCannedACL",
            "description": "The canned ACL to apply to the restore results."
          },
          "AccessControlList": {
            "$ref": "#/components/schemas/Grants",
            "description": "A list of grants that control access to the staged results."
          },
          "UserMetadata": {
            "$ref": "#/components/schemas/UserMetadata",
            "description": "A list of metadata to store with the restore results in S3."
          },
          "StorageClass": {
            "$ref": "#/components/schemas/StorageClass",
            "description": "The class of storage used to store the restore results."
          }
        },
        "description": "Describes an S3 location that will receive the results of the restore request."
      },
      "SSECustomerAlgorithm": {
        "type": "string"
      },
      "SSECustomerKey": {
        "type": "string",
        "format": "password"
      },
      "SSECustomerKeyMD5": {
        "type": "string"
      },
      "SSEKMS": {
        "type": "object",
        "required": [
          "KeyId"
        ],
        "properties": {
          "KeyId": {
            "$ref": "#/components/schemas/SSEKMSKeyId",
            "description": "Specifies the ID of the AWS Key Management Service (KMS) master encryption key to use for encrypting Inventory reports."
          }
        },
        "description": "Specifies the use of SSE-KMS to encrypt delievered Inventory reports."
      },
      "SSEKMSKeyId": {
        "type": "string",
        "format": "password"
      },
      "SSES3": {
        "type": "object",
        "properties": {},
        "description": "Specifies the use of SSE-S3 to encrypt delievered Inventory reports."
      },
      "ServerSideEncryption": {
        "type": "string",
        "enum": [
          "AES256",
          "aws:kms"
        ]
      },
      "Size": {
        "type": "integer"
      },
      "SourceSelectionCriteria": {
        "type": "object",
        "properties": {
          "SseKmsEncryptedObjects": {
            "$ref": "#/components/schemas/SseKmsEncryptedObjects",
            "description": "Container for filter information of selection of KMS Encrypted S3 objects."
          }
        },
        "description": "Container for filters that define which source objects should be replicated."
      },
      "SseKmsEncryptedObjects": {
        "type": "object",
        "required": [
          "Status"
        ],
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/SseKmsEncryptedObjectsStatus",
            "description": "The replication for KMS encrypted S3 objects is disabled if status is not Enabled."
          }
        },
        "description": "Container for filter information of selection of KMS Encrypted S3 objects."
      },
      "SseKmsEncryptedObjectsStatus": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ]
      },
      "StartAfter": {
        "type": "string"
      },
      "Stats": {
        "type": "object",
        "properties": {
          "BytesScanned": {
            "$ref": "#/components/schemas/BytesScanned",
            "description": "Total number of object bytes scanned."
          },
          "BytesProcessed": {
            "$ref": "#/components/schemas/BytesProcessed",
            "description": "Total number of uncompressed object bytes processed."
          },
          "BytesReturned": {
            "$ref": "#/components/schemas/BytesReturned",
            "description": "Total number of bytes of records payload data returned."
          }
        }
      },
      "StatsEvent": {
        "type": "object",
        "properties": {
          "Details": {
            "$ref": "#/components/schemas/Stats",
            "description": "The Stats event details."
          }
        }
      },
      "StorageClass": {
        "type": "string",
        "enum": [
          "STANDARD"
        ]
      },
      "TargetBucket": {
        "type": "string"
      },
      "TargetGrant": {
        "type": "object",
        "properties": {
          "Grantee": {
            "$ref": "#/components/schemas/Grantee"
          },
          "Permission": {
            "$ref": "#/components/schemas/BucketLogsPermission",
            "description": "Logging permissions assigned to the Grantee for the bucket."
          }
        }
      },
      "TargetGrants": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TargetGrant"
        }
      },
      "TargetPrefix": {
        "type": "string"
      },
      "Tier": {
        "type": "string",
        "enum": [
          "Standard",
          "Bulk",
          "Expedited"
        ]
      },
      "Token": {
        "type": "string"
      },
      "Transition": {
        "type": "object",
        "properties": {
          "Date": {
            "$ref": "#/components/schemas/Date",
            "description": "Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format."
          },
          "Days": {
            "$ref": "#/components/schemas/Days",
            "description": "Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer."
          },
          "StorageClass": {
            "$ref": "#/components/schemas/TransitionStorageClass",
            "description": "The class of storage used to store the object."
          }
        }
      },
      "TransitionList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Transition"
        },
        "xml": {
          "wrapped": false
        }
      },
      "TransitionStorageClass": {
        "type": "string",
        "enum": [
          "GLACIER"
        ]
      },
      "Type": {
        "type": "string",
        "enum": [
          "CanonicalUser",
          "AmazonCustomerByEmail",
          "Group"
        ]
      },
      "URI": {
        "type": "string"
      },
      "UploadId": {
        "type": "object",
        "properties": {
          "Name": {
            "$ref": "#/components/schemas/MultipartUploadId",
            "description": "ID string"
          }
        }
      },
      "UploadIdMarker": {
        "type": "string"
      },
      "UploadPartCopyOutput": {
        "type": "object",
        "example": {
          "CopyPartResult": {
            "ETag": "\"b0c6f0e7e054ab8fa2536a2677f8734d\"",
            "LastModified": "2016-12-29T21:24:43.000Z"
          }
        },
        "properties": {
          "CopyPartResult": {
            "$ref": "#/components/schemas/CopyPartResult"
          }
        }
      },
      "UploadPartCopyRequest": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "CopySource": "/bucketname/sourceobjectkey",
          "Key": "examplelargeobject",
          "PartNumber": "1",
          "UploadId": "exampleuoh_10OhKhT7YukE9bjzTPRiuaCotmZM_pFngJFir9OZNrSr5cWa3cq3LZSUsfjI4FI7PkP91We7Nrw--"
        },
        "properties": {}
      },
      "UploadPartOutput": {
        "type": "object",
        "example": {
          "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\""
        },
        "properties": {}
      },
      "UploadPartRequest": {
        "type": "object",
        "example": {
          "Body": "fileToUpload",
          "Bucket": "examplebucket",
          "Key": "examplelargeobject",
          "PartNumber": "1",
          "UploadId": "xadcOB_7YPBOJuoFiQ9cz4P3Pe6FIZwO4f7wN93uHsNBEw97pl5eNwzExg0LAT2dUN91cOmrEQHDsP3WA60CEg--"
        },
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/Body",
            "description": "Object data."
          }
        }
      },
      "UserMetadata": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MetadataEntry"
        }
      },
      "Value": {
        "type": "string"
      }
    }
  }
}
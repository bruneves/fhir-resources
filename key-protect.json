{
  "openapi": "3.0.0",
  "info": {
    "title": "IBM Key Protect API",
    "description": "IBM Key Protect helps you provision encrypted keys for apps across IBM Cloud. As you manage the lifecycle of your keys, you can benefit from knowing that your keys are secured by cloud-based FIPS 140-2 Level 3 hardware security modules (HSMs) that protect against theft of information. You can use the Key Protect API to store, generate, and retrieve your key material. Keys within the service can protect any type of data in your symmetric key based encryption solution.",
    "version": "2.0.0",
    "contact": {
      "name": "IBM Key Protect",
      "url": "https://cloud.ibm.com/docs/key-protect/"
    },
    "license": {
      "name": "IBM-License",
      "url": "http://ibm.com/LICENSE-IBM"
    },
    "x-ibm-name": "key-protect",
    "x-try-it-out-enabled": {
      "enabled": false,
      "credentials": false,
      "defaultApiEndpoint": "https://us-south.kms.cloud.ibm.com",
      "corsPolicy": true
    }
  },
  "servers": [
    {
      "url": "https://{region}.kms.cloud.ibm.com",
      "variables": {
        "region": {
          "description": "The region prefix that represents the geographic area where your Key Protect service instance resides.",
          "default": "us-south",
          "enum": [
            "au-syd",
            "eu-de",
            "eu-gb",
            "jp-tok",
            "us-east",
            "us-south"
          ]
        }
      }
    }
  ],
  "paths": {
    "/api/v2/keys": {
      "parameters": [
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "post": {
        "summary": "Create a key",
        "tags": [
          "Keys"
        ],
        "description": "Creates a new key with specified key material. \n   \nKey Protect designates the resource as either a root key or a standard key based on the `extractable` value that you specify. A successful `POST /keys` operation adds the key to the service and  returns the details of the request in the response entity-body, if the Prefer header is set to  `return=representation`.",
        "operationId": "createKey",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Prefer"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateKeyBody"
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/vnd.ibm.kms.key+json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.key+json\",\n      \"collectionTotal\": 1\n    },\n    \"resources\": [\n    {\n      \"type\": \"application/vnd.ibm.kms.key+json\",\n      \"name\": \"Root-key\",\n      \"description\": \"...\",\n      \"extractable\": false\n      }\n    ]\n  }'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n\"context\"\n\"encoding/json\"\n\"fmt\"\n\n\"github.com/IBM/keyprotect-go-client\" )\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  rootkey, err := api.CreateKey(context.Background(), <key_name>, <expiration_date>, <extractable>)\n  if err != nil {\n    fmt.Println(\"Error while creating key: \", err)\n    return\n  }\n  b, _ := json.MarshalIndent(rootkey, \"\", \"  \")\n  fmt.Println(string(b))\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          },
          {
            "in": "body",
            "name": "body",
            "value": [
              "{\n  \"metadata\": {\n    \"collectionType\": \"application/vnd.ibm.kms.key+json\",\n    \"collectionTotal\": 1\n  },\n  \"resources\": [\n  {\n    \"type\": \"application/vnd.ibm.kms.key+json\",\n    \"name\": \"Root-key\",\n    \"description\": \"Test key\",\n    \"extractable\": false\n    }\n  ]\n}"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "The key was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.key+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "type": "application/vnd.ibm.kms.key+json",
                      "id": "...",
                      "name": "Root-key",
                      "description": "...",
                      "state": 1,
                      "extractable": false,
                      "crn": "...",
                      "imported": false,
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "createdBy": "...",
                      "algorithmType": "AES",
                      "algorithmMetadata": {
                        "bitLength": 256,
                        "mode": "CBC_PAD"
                      },
                      "algorithmBitSize": 256,
                      "algorithmMode": "CBC_PAD",
                      "lastUpdateDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "keyVersion": {
                        "id": "...",
                        "creationDate": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "dualAuthDelete": {
                        "enabled": true,
                        "keySetForDeletion": true,
                        "authExpiration": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "deleted": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The key is missing a required field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "errorMsg": "Bad Request: The key is missing a required field."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The import token that was used to encrypt this key has reached its `maxAllowedRetrievals` or `expirationDate`,  and it is no longer available for operations. To create a new import token, use `POST /import_token`.\n  \nIn very rare cases, the import token may expire before its expiration time. Ensure that your client application is configured with a retry mechanism for catching and responding to `409` conflict exceptions.  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    "errorMsg: 'Conflict: The import token that was used to encrypt this key has reached its  `maxAllowedRetrievals` or `expirationDate`, and it is no longer available for key operations. To  create a new import token, use `POST /import_token`. "
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "List keys",
        "tags": [
          "Keys"
        ],
        "description": "Retrieves a list of keys that are stored in your Key Protect service instance.\n  \n**Note:** `GET /keys` will not return the key material in the response body. You can retrieve the key material for a standard key with a subsequent `GET /keys/{id}` request.",
        "operationId": "getKeys",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/OffsetParam"
          }
        ],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key+json'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n  )\n\n  func main() {\n\n    // Initialize the Key Protect client as specified in Authentication\n\n    keys, err := api.GetKeys(context.Background(), <limit>, <offset>)\n    if err != nil {\n      fmt.Println(\"Get Keys failed with error: \", err)\n      return\n    }\n    b, _ := json.MarshalIndent(keys, \"\", \"  \")\n    fmt.Println(string(b))\n  }"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The list of keys was successfully retrieved.",
            "headers": {
              "Key-Total": {
                "description": "The number of keys in your service instance.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKeys"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.key+json",
                    "collectionTotal": 2
                  },
                  "resources": [
                    {
                      "type": "application/vnd.ibm.kms.key+json",
                      "id": "...",
                      "name": "Root-key",
                      "description": "...",
                      "state": 1,
                      "extractable": true,
                      "crn": "...",
                      "imported": false,
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "createdBy": "...",
                      "algorithmType": "AES",
                      "algorithmMetadata": {
                        "bitLength": 256,
                        "mode": "CBC_PAD"
                      },
                      "algorithmBitSize": 256,
                      "algorithmMode": "CBC_PAD",
                      "lastUpdateDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "lastRotateDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "keyVersion": {
                        "id": "...",
                        "creationDate": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "dualAuthDelete": {
                        "enabled": true,
                        "keySetForDeletion": true,
                        "authExpiration": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "deleted": false
                    },
                    {
                      "type": "application/vnd.ibm.kms.key+json",
                      "id": "...",
                      "name": "Standard-key",
                      "description": "...",
                      "state": 1,
                      "extractable": true,
                      "crn": "...",
                      "imported": false,
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "createdBy": "...",
                      "algorithmType": "AES",
                      "algorithmMetadata": {
                        "bitLength": 256,
                        "mode": "CBC_PAD"
                      },
                      "algorithmBitSize": 256,
                      "algorithmMode": "CBC_PAD",
                      "lastUpdateDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "dualAuthDelete": {
                        "enabled": true,
                        "keySetForDeletion": true,
                        "authExpiration": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "deleted": false
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "head": {
        "summary": "Retrieve key total",
        "tags": [
          "Keys"
        ],
        "description": "Returns the same HTTP headers as a GET request without returning the entity-body. This operation returns the number of keys in your instance in a header called `Key-Total`.",
        "operationId": "getKeyCollectionMetadata",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -I HEAD \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key+json'"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata was successfully retrieved.",
            "headers": {
              "Key-Total": {
                "description": "The number of keys in your service instance.",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v2/keys/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/KeyId"
        },
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "get": {
        "summary": "Retrieve a key",
        "tags": [
          "Keys"
        ],
        "description": "Retrieves a key and its details by specifying the ID of the key.",
        "operationId": "getKey",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID> \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key+json'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n  )\n\n  func main() {\n\n    // Initialize the Key Protect client as specified in Authentication\n\n    key, err := api.GetKey(context.Background(), <key_ID>)\n    if err != nil {\n      fmt.Println(\"Get Key failed with error: \", err)\n      return\n    }\n    b, _ := json.MarshalIndent(key, \"\", \"  \")\n    fmt.Println(string(b))\n  }"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "path",
            "name": "id",
            "value": ""
          },
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The key was successfully retrieved. If the key was previously deleted, `keyVersion.creationDate` is omitted from the request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKey"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.key+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "type": "application/vnd.ibm.kms.key+json",
                      "id": "...",
                      "name": "Standard-key",
                      "description": "...",
                      "state": 1,
                      "extractable": true,
                      "crn": "...",
                      "imported": false,
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "createdBy": "...",
                      "algorithmType": "AES",
                      "algorithmMetadata": {
                        "bitLength": 256,
                        "mode": "CBC_PAD"
                      },
                      "algorithmBitSize": 256,
                      "algorithmMode": "CBC_PAD",
                      "keyVersion": {
                        "id": "...",
                        "creationDate": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "dualAuthDelete": {
                        "enabled": true,
                        "keySetForDeletion": true,
                        "authExpiration": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "deleted": false,
                      "payload": "..."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The key could not be retrieved due to a malformed, invalid, or missing ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "errorMsg": "Bad Request: The key could not be retrieved due to a malformed, invalid, or missing ID."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The key could not be found. Verify that the key ID specified is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "errorMsg": "Not Found: The key could not be found. Verify that the key ID specified is valid."
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Invoke an action on a key",
        "tags": [
          "Keys"
        ],
        "description": "Invokes an action on a specified key. This method supports the following actions:\n   \n- `wrap`: Use a root key to [wrap or encrypt a data encryption key](/docs/key-protect?topic=key-protect-wrap-keys)\n- `unwrap`: Use a root key to [unwrap or decrypt a data encryption key](/docs/key-protect?topic=key-protect-unwrap-keys)\n- `rewrap`: Use a root key to [rewrap or reencrypt a data encryption key](/docs/key-protect?topic=key-protect-rewrap-keys)\n- `rotate`: [Create a new version](/docs/key-protect?topic=key-protect-rotate-keys) of a root key\n- `disable`: [Disable operations](/docs/key-protect?topic=key-protect-disable-keys) for a key\n- `enable`: [Enable operations](/docs/key-protect?topic=key-protect-disable-keys#enable-api) for a key\n- `setKeyDeletion`: [Authorize deletion](/docs/key-protect?topic=key-protect-delete-dual-auth-keys#set-key-deletion-api) for a key with a dual authorization policy\n- `unsetKeyDeletion`: [Remove an authorization](/docs/key-protect?topic=key-protect-delete-dual-auth-keys#unset-key-deletion-api) for a key with a dual authorization policy\n- `restore`: [Restore a previously imported root key](/docs/key-protect?topic=key-protect-restore-keys)\n\n\n**Note:** When you unwrap a wrapped data encryption key (WDEK) by using a rotated root key, the service returns a new\nciphertext in the response entity-body. Each ciphertext remains available for `unwrap` actions. If you unwrap a\nDEK with a previous ciphertext, the service also returns the latest ciphertext and latest key version in the response. \nUse the latest ciphertext for future unwrap operations.",
        "operationId": "actionOnKey",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "The action to perform on the specified key.",
            "schema": {
              "type": "string",
              "enum": [
                "wrap",
                "unwrap",
                "rotate",
                "rewrap",
                "setKeyForDeletion",
                "unsetKeyForDeletion",
                "restore"
              ]
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/Prefer"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/KeyActionBody"
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request (wrap)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>?action=wrap \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key_action+json' \\\n  -H 'content-type: application/vnd.ibm.kms.key_action+json' \\\n  -d '{ \n    \"plaintext\": \"<data_key>\", \n    \"aad\": [\"<additional_data>\", \"<additional_data>\"] \n  }'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (unwrap)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>?action=unwrap \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key_action+json' \\\n  -H 'content-type: application/vnd.ibm.kms.key_action+json' \\\n  -d '{ \n    \"ciphertext\": \"<encrypted_data_key>\", \n    \"aad\": [\"<additional_data>\", \"<additional_data>\"] \n  }'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (rewrap)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>?action=unwrap \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key_action+json' \\\n  -H 'content-type: application/vnd.ibm.kms.key_action+json' \\\n  -d '{ \n    \"ciphertext\": \"<encrypted_data_key>\", \n    \"aad\": [\"<additional_data>\", \"<additional_data>\"] \n  }'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (rotate)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>?action=rotate \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key_action+json' \\\n  -H 'content-type: application/vnd.ibm.kms.key_action+json' \\\n  -d '{ \n    \"payload\": \"<new_key_material>\"\n  }'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (disable)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>?action=disable \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key_action+json' \\\n  -H 'content-type: application/vnd.ibm.kms.key_action+json'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (enable)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>?action=enable \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key_action+json' \\\n  -H 'content-type: application/vnd.ibm.kms.key_action+json'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request (wrap)",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  aad := []string{\"<additional_data>\", \"<additional_data>\"}\n  plaintext := []byte(<data_key>)\n  ciphertext, err := api.Wrap(context.Background(), <key_ID>, plaintext, &aad)\n  if err != nil {\n    fmt.Println(\"Error wrapping the key: \", err)\n    return\n  }\n  fmt.Println(string(ciphertext))\n\n}"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (unwrap)",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  aad := []string{\"<additional_data>\", \"<additional_data>\"}\n  ciphertext := []byte(<encrypted_data_key>)\n  pt2, err := api.Unwrap(context.Background(), <key_ID>, ciphertext, &aad)\n  if err != nil {\n  fmt.Println(\"Error while unwrapping DEK: \", err)\n  return\n  }\nb, _ := json.MarshalIndent(pt2, \"\", \"  \")\nfmt.Println(string(b))\n}"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (rotate)",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n \"context\"\n \"fmt\"\n\n \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  // Set the payload to a base64 encoded string if your key is an imported root key\n  // Skip setting payload if your key is a generated root key\n  payload := \"<new_key_material>\"\n  err = api.Rotate(context.Background(), <key_ID> , payload)\n  if err != nil {\n    fmt.Println(\"Error rotating the key: \", err)\n    return\n  }\n  fmt.Println(\"Key successfully rotated\")\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "path",
            "name": "id",
            "value": ""
          },
          {
            "in": "query",
            "name": "action",
            "value": "wrap"
          },
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          },
          {
            "in": "body",
            "name": "body",
            "value": [
              "{ \n  \"plaintext\": \"tF9ss0W9HQUVkddcjSeGg/MqZFs2CVh/FFKLPLLnOwY=\", \n  \"aad\": [\"data1\", \"data2\"] \n}"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful key operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyActionOneOfResponse"
                },
                "examples": {
                  "WrapKey": {
                    "value": {
                      "plaintext": "tF9ss0W9HQUVkddcjSeGg/MqZFs2CVh/FFKLPLLnOwY=",
                      "ciphertext": "eyJjaXBoZXJ0ZXh0Ijoic1ZZRnZVcjdQanZXQ0tFakMwRFFWZktqQ3AyRmtiOFJOSDJSTkpZRzVmU1hWNDJScDRDVythU0h3Y009IiwiaGFzaCI6IjVWNzNBbm9XdUxxM1BvZEZpd1AxQTdQMUZrTkZOajVPMmtmMkNxdVBxL0NRdFlOZnBvempiYUxjRDNCSWhxOGpKZ2JNR0xhMHB4dDA4cTYyc0RJMGRBPT0iLCJpdiI6Ilc1T2tNWFZuWDFCTERDUk51M05EUlE9PSIsInZlcnNpb24iOiIzLjAuMCIsImhhbmRsZSI6IjRkZjg5ZGVlLWU3OTMtNGY5Ny05MGNjLTc1ZWQ5YjZlNWM4MiJ9",
                      "keyVersion": {
                        "id": "..."
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "The imported key was successfully restored.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.key+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "type": "application/vnd.ibm.kms.key+json",
                      "id": "...",
                      "name": "Root-key",
                      "description": "...",
                      "state": 1,
                      "extractable": false,
                      "crn": "...",
                      "imported": true,
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "createdBy": "...",
                      "algorithmType": "AES",
                      "algorithmMetadata": {
                        "bitLength": 256,
                        "mode": "CBC_PAD"
                      },
                      "algorithmBitSize": 256,
                      "algorithmMode": "CBC_PAD",
                      "lastUpdateDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "keyVersion": {
                        "id": "...",
                        "creationDate": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "dualAuthDelete": {
                        "enabled": true,
                        "keySetForDeletion": true,
                        "authExpiration": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "deleted": false
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Successful key operation."
          },
          "400": {
            "description": "Your authentication data or key is invalid, or the entity-body is missing a required field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    "errorMsg: 'Bad Request: Your authentication data or key is invalid, or the entity-body is missing a  required field.'"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "The key is not in an appropriate state, so the KeyAction has failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    "errorMsg: 'Conflict: The key is not in an appropriate state, so the KeyAction has failed."
                  ]
                }
              }
            }
          },
          "410": {
            "$ref": "#/components/responses/Gone"
          },
          "422": {
            "description": "The ciphertext provided for the unwrap operation was not wrapped by this key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    "errorMsg: 'Unprocessable Entity: The ciphertext provided for the unwrap operation was not wrapped by  this key.'"
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete a key",
        "tags": [
          "Keys"
        ],
        "description": "Deletes a key by specifying the ID of the key. \n  \nBy default, Key Protect requires a single authorization to delete keys. For added protection,  you can [enable a dual authorization policy](#set-key-policies) to  safely delete keys from your service instance.\n  \n**Important:** When you delete a key, you permanently shred its contents and associated data. The action cannot be reversed.\n  \n**Note:** By default, Key Protect blocks the deletion of a key that's protecting a cloud resource, such as a  Cloud Object Storage bucket. Use `GET keys/{id}/registrations` to verify if the key has an active registration to a resource. To delete the key and its associated registrations, set the optional `force` parameter to `true`. ",
        "operationId": "deleteKey",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Prefer"
          },
          {
            "$ref": "#/components/parameters/Force"
          }
        ],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X DELETE \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID> \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key+json'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  delKey, err := api.DeleteKey(context.Background(), <key_ID>, kp.ReturnRepresentation)\n  if err != nil {\n    fmt.Println(\"Error while deleting: \", err)\n    return\n  }\n  b, _ := json.MarshalIndent(delKey, \"\", \"  \")\n  fmt.Println(string(b))\n\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "path",
            "name": "id",
            "value": ""
          },
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The key was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKey"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.key+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "type": "application/vnd.ibm.kms.key+json",
                      "id": "...",
                      "name": "Root-key",
                      "description": "...",
                      "state": 5,
                      "extractable": false,
                      "crn": "...",
                      "imported": false,
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "createdBy": "...",
                      "algorithmType": "AES",
                      "algorithmMetadata": {
                        "bitLength": 256,
                        "mode": "CBC_PAD"
                      },
                      "algorithmBitSize": 256,
                      "algorithmMode": "CBC_PAD",
                      "lastUpdateDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "lastRotateDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "dualAuthDelete": {
                        "enabled": true,
                        "keySetForDeletion": true,
                        "authExpiration": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "deleted": false,
                      "deletionDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "deletedBy": "..."
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The key was successfully deleted. No content."
          },
          "400": {
            "description": "The key cannot be deleted due to a malformed, invalid, or missing ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "errorMsg": "Bad Request: The key cannot be deleted due to a malformed, invalid, or missing ID."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "The key could not be deleted because it is protecting one or more cloud resources that have a retention policy. \n  \nUse `GET /keys/{id}/registrations` to learn which resources this key is associated with. A registration with  `”preventKeyDeletion”: true` indicates that the associated resource has a retention policy. To enable deletion,  contact an account owner to remove the retention policy on each resource that is associated with this key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Key could not be deleted. Please `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "PREV_KEY_DEL_ERR",
                        "message": "The key cannot be deleted because it's protecting a cloud resource that has a retention policy. Before you delete this key, contact an account owner to remove the retention policy on each resource that is associated with the key",
                        "status": 409,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                      }
                    ]
                  }
                }
              }
            }
          },
          "410": {
            "$ref": "#/components/responses/Gone"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v2/keys/{id}/metadata": {
      "parameters": [
        {
          "$ref": "#/components/parameters/KeyId"
        },
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "get": {
        "summary": "Retrieve key metadata",
        "tags": [
          "Keys"
        ],
        "description": "Retrieves the details of a key by specifying the ID of the key.",
        "operationId": "getKeyMetadata",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/metadata \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key+json'"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "path",
            "name": "id",
            "value": ""
          },
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The key metadata was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKeyMetadata"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.key+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "type": "application/vnd.ibm.kms.key+json",
                      "id": "...",
                      "name": "Standard-key",
                      "description": "...",
                      "state": 1,
                      "extractable": true,
                      "crn": "...",
                      "imported": false,
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "createdBy": "...",
                      "algorithmType": "AES",
                      "algorithmMetadata": {
                        "bitLength": 256,
                        "mode": "CBC_PAD"
                      },
                      "algorithmBitSize": 256,
                      "algorithmMode": "CBC_PAD",
                      "lastUpdateDate": "YYYY-MM-DDTHH:MM:SSZ",
                      "dualAuthDelete": {
                        "enabled": true,
                        "keySetForDeletion": true,
                        "authExpiration": "YYYY-MM-DDTHH:MM:SSZ"
                      },
                      "deleted": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The key metadata could not be retrieved due to a malformed, invalid, or missing ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "errorMsg": "Bad Request: The key metadata could not be retrieved due to a malformed, invalid, or missing ID."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The key metadata for key with specified ID could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Key metadata could not be retrieved. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "KEY_NOT_FOUND",
                        "message": "Key does not exist",
                        "status": 404,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v2/keys/{id}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/KeyId"
        },
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "get": {
        "summary": "List key versions",
        "tags": [
          "Keys"
        ],
        "description": "Retrieves all versions of a root key by specifying the ID of the key.\n  \nWhen you rotate a root key, you generate a new version of the key. If you're using the root key to protect resources across IBM Cloud, the registered cloud services that you associate with the key use the latest  key version to wrap your data. [Learn more](/docs/key-protect?topic=key-protect-key-rotation) ",
        "operationId": "getKeyVersions",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/KeyVersionsLimitParam"
          },
          {
            "$ref": "#/components/parameters/KeyVersionsOffsetParam"
          }
        ],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/versions \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.key.version+json'"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "responses": {
          "200": {
            "description": "The list of key versions was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKeyVersions"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.key+json",
                    "collectionTotal": 2
                  },
                  "resources": [
                    {
                      "id": "...",
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ"
                    },
                    {
                      "id": "...",
                      "creationDate": "YYYY-MM-DDTHH:MM:SSZ"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "The key is not in an active state.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    "errorMsg: 'Conflict: The key is not in an active state.' "
                  ]
                }
              }
            }
          },
          "410": {
            "$ref": "#/components/responses/Gone"
          }
        }
      }
    },
    "/api/v2/keys/{id}/policies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/KeyId"
        },
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "put": {
        "summary": "Set key policies",
        "tags": [
          "Policies"
        ],
        "description": "Creates or updates one or more policies for the specified key.\n  \nYou can set policies for a key, such as an [automatic rotation policy](/docs/key-protect?topic=key-protect-set-rotation-policy)  or a [dual authorization policy](/docs/key-protect?topic=key-protect-set-dual-auth-key-policy) to protect  against the accidental deletion of keys. Use `PUT /keys/{id}/policies` to create new policies for a key or update an existing policy.",
        "operationId": "putPolicy",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/KeyPolicyType"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/KeyCreateUpdatePolicyBody"
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X PUT \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/policies \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/vnd.ibm.kms.policy+json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.policy+json\",\n      \"collectionTotal\": 2\n    },\n    \"resources\": [\n    {\n      \"type\": \"application/vnd.ibm.kms.policy+json\",\n      \"rotation\": {\n        \"interval_month\": <rotation_interval>\n        }\n      },\n    {\n      \"type\": \"application/vnd.ibm.kms.policy+json\",\n      \"dualAuthDelete\": {\n        \"enabled\": <true|false>\n        }\n      }\n    ]\n  }'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (dual authorization policy)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X PUT \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/policies?policy=dualAuthDelete \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/vnd.ibm.kms.policy+json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.policy+json\",\n      \"collectionTotal\": 1\n    },\n    \"resources\": [\n    {\n      \"type\": \"application/vnd.ibm.kms.policy+json\",\n      \"dualAuthDelete\": {\n        \"enabled\": <true|false>\n        }\n      }\n    ]\n  }'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (rotation policy)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X PUT \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/policies?policy=rotation \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/vnd.ibm.kms.policy+json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.policy+json\",\n      \"collectionTotal\": 1\n    },\n    \"resources\": [\n    {\n      \"type\": \"application/vnd.ibm.kms.policy+json\",\n      \"rotation\": {\n        \"interval_month\": <rotation_interval>\n        }\n      }\n    ]\n  }'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request (rotation policy)",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\" \n  \"encoding/json\"\n  \"fmt\"\n\n  kp \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  policy, err := api.SetPolicy(context.Background(), <key_ID>, kp.ReturnRepresentation, <rotation_interval>)\n  if err != nil {\n    fmt.Println(\"Error while creating policies: \", err)\n    return\n  }\n\n  b, _ := json.MarshalIndent(policy, \"\", \"  \")\n  fmt.Println(string(b))\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "path",
            "name": "id",
            "value": ""
          },
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          },
          {
            "in": "body",
            "name": "body",
            "value": [
              "{\n  \"metadata\": {\n    \"collectionType\": \"application/vnd.ibm.kms.policy+json\",\n    \"collectionTotal\": 2\n  },\n  \"resources\": [\n    {\n      \"type\": \"application/vnd.ibm.kms.policy+json\",\n      \"rotation\": {\n        \"interval_month\": 3\n      }\n    },\n    {\n      \"type\": \"application/vnd.ibm.kms.policy+json\",\n      \"dualAuthDelete\": {\n        \"enabled\": <true|false>\n      }\n    }\n  ]\n}"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The policy or policies were successfully created or updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKeyPoliciesOneOf"
                },
                "examples": {
                  "policies": {
                    "$ref": "#/components/examples/GetMultipleKeyPolicies"
                  },
                  "dualAuthDelete": {
                    "$ref": "#/components/examples/GetKeyPolicyDualAuthDelete"
                  },
                  "rotation": {
                    "$ref": "#/components/examples/GetKeyPolicyRotation"
                  }
                }
              }
            }
          },
          "204": {
            "description": "The policy or policies were successfully created or updated. No content. "
          },
          "400": {
            "description": "The policy or policies cannot be created or updated due to a malformed, invalid, or missing ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "410": {
            "$ref": "#/components/responses/Gone"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "List key policies",
        "tags": [
          "Policies"
        ],
        "description": "Retrieves a list of policies that are associated with a specified key.\n  \nYou can set policies for a key, such as an [automatic rotation policy](/docs/key-protect?topic=key-protect-set-rotation-policy)  or a [dual authorization policy](/docs/key-protect?topic=key-protect-set-dual-auth-key-policy) to protect  against the accidental deletion of keys. Use `GET /keys/{id}/policies` to browse the policies that exist for a  specified key.",
        "operationId": "getPolicy",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/KeyPolicyType"
          }
        ],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request (all key policies)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/policies \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.policy+json'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (dual authorization policy)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/policies?policy=dualAuthDelete \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.policy+json'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (rotation policy)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/policies?policy=rotation \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.policy+json'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n\n  kp \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  policy, err := api.GetPolicy(context.Background(), <key_ID>)\n  if err != nil {\n    fmt.Println(\"Error while getting policies: \", err)\n    return\n  }\n\n  b, _ := json.MarshalIndent(policy, \"\", \"  \")\n  fmt.Println(string(b))\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "path",
            "name": "id",
            "value": ""
          },
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The policy resources were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKeyPoliciesOneOf"
                },
                "examples": {
                  "policies": {
                    "$ref": "#/components/examples/GetMultipleKeyPolicies"
                  },
                  "dualAuthDelete": {
                    "$ref": "#/components/examples/GetKeyPolicyDualAuthDelete"
                  },
                  "rotation": {
                    "$ref": "#/components/examples/GetKeyPolicyRotation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is missing a required field or contains invalid values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v2/instance/policies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "put": {
        "summary": "Set instance policies",
        "tags": [
          "Policies"
        ],
        "description": "Creates or updates one or more policies for the specified service instance.\n  \n**Note:** When you set an instance policy, Key Protect associates the policy information with keys that you add to the instance after the policy is updated. This operation does not affect existing keys in the instance.",
        "operationId": "putInstancePolicy",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/InstancePolicyType"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/InstanceCreateUpdatePolicyBody"
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X PUT \\\n  https://<region>.kms.cloud.ibm.com/api/v2/instance/policies \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/vnd.ibm.kms.policy+json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.policy+json\",\n      \"collectionTotal\": 1\n    },\n    \"resources\": [\n      {\n        \"policy_type\": \"dualAuthDelete\",\n        \"policy_data\": {\n          \"enabled\": <true|false>\n        }\n      }\n    ]\n  }'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (dual authorization policy)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X PUT \\\n  https://<region>.kms.cloud.ibm.com/api/v2/instance/policies?policy=dualAuthDelete \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/vnd.ibm.kms.policy+json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.policy+json\",\n      \"collectionTotal\": 1\n    },\n    \"resources\": [\n      {\n        \"policy_type\": \"dualAuthDelete\",\n        \"policy_data\": {\n          \"enabled\": <true|false>\n        }\n      }\n    ]\n  }'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request (dual authorization policy)",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  err = api.SetInstancePolicies(context.Background(), <true|false>)\n  if err != nil {\n    fmt.Println(\"Error while creating policies: \", err)\n    return\n  }\n  fmt.Println(\"Instance policy set successfully\")\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "path",
            "name": "id",
            "value": ""
          },
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          },
          {
            "in": "body",
            "name": "body",
            "value": [
              "{\n  \"metadata\": {\n    \"collectionType\": \"application/vnd.ibm.kms.policy+json\",\n    \"collectionTotal\": 1\n  },\n  \"resources\": [\n    {\n      \"policy_type\": \"dualAuthDelete\",\n      \"policy_data\": {\n        \"enabled\": <true|false>\n      }\n    }\n  ]\n}"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "The policy or policies were successfully created or updated. No content."
          },
          "400": {
            "description": "The policy or policies cannot be created or updated due to a malformed or invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "410": {
            "$ref": "#/components/responses/Gone"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "List instance policies",
        "tags": [
          "Policies"
        ],
        "description": "Retrieves a list of policies that are associated with a specified service instance.\nYou can manage advanced preferences for keys in your service instance by creating instance-level policies. Use `GET /instance/policies` to browse the policies that are associated with the specified instance. Currently,   dual authorization policies are supported.",
        "operationId": "getInstancePolicy",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/InstanceParam"
          },
          {
            "$ref": "#/components/parameters/CorrelationId"
          },
          {
            "$ref": "#/components/parameters/InstancePolicyType"
          }
        ],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/instance/policies \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.policy+json'"
                    ]
                  }
                ]
              },
              {
                "name": "Example request (dual authorization policy)",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/instance/policies?policy=dualAuthDelete \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'accept: application/vnd.ibm.kms.policy+json'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  policies, err := api.GetInstancePolicies(context.Background())\n  if err != nil {\n    fmt.Println(\"Error while getting policies: \", err)\n    return\n  }\n  b, _ := json.MarshalIndent(policies, \"\", \"  \")\n  fmt.Println(string(b))\n\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The policy resources were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstancePoliciesOneOf"
                },
                "examples": {
                  "policies": {
                    "$ref": "#/components/examples/GetMultipleInstancePolicies"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is missing a required field or contains invalid values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v2/import_token": {
      "parameters": [
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "post": {
        "summary": "Create an import token",
        "tags": [
          "Import tokens"
        ],
        "description": "Creates an import token that you can use to encrypt and import root keys into the service.  [Learn more](/docs/key-protect?topic=key-protect-importing-keys#using-import-tokens)\n   \nWhen you call `POST /import_token`, Key Protect creates an RSA key-pair from its HSMs. The service encrypts and  stores the private key in the HSM, and returns the corresponding public key when you call `GET /import_token`.  You can create only one import token per service instance. ",
        "operationId": "postImportToken",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "The base request to create an import token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportToken"
              }
            }
          },
          "required": true
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/import_token \\\n  -H 'accept: application/vnd.ibm.collection+json' \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/json' \\\n  -d '{ \n    \"expiration\": <expiration_time>, \\\n    \"maxAllowedRetrievals\": <use_count> \n  }'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  importToken, err := api.CreateImportToken(context.Background(), <expiration_time>, <use_count>)\n  if err != nil {\n    fmt.Println(\"Error while creating import token: \", err)\n    return\n  }\n  b, _ := json.MarshalIndent(importToken, \"\", \"  \")\n  fmt.Println(string(b))\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The import token was successfully created.",
            "content": {
              "application/vnd.ibm.kms.import_token+json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportToken"
                },
                "example": {
                  "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                  "expirationDate": "YYYY-MM-DDTHH:MM:SSZ",
                  "maxAllowedRetrievals": 10,
                  "remainingRetrievals": 10
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "Retrieve an import token",
        "tags": [
          "Import tokens"
        ],
        "description": "Retrieves the import token that is associated with your service instance.\n  \nWhen you call `GET /import_token`, Key Protect returns the public key that you can use to encrypt and import key material to the service, along with details about the key. \n  \n**Note:** After you reach the `maxAllowedRetrievals` or `expirationDate` for the import token, the import token and its associated public key can no longer be used for key operations. To create a new import token, use  `POST /import_token`.",
        "operationId": "getImportToken",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/import_token \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/vnd.ibm.kms.import_token+json'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "go",
                    "source": [
                      "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n\n  \"github.com/IBM/keyprotect-go-client\"\n)\n\nfunc main() {\n\n  // Initialize the Key Protect client as specified in Authentication\n\n  importToken, err := api.GetImportTokenTransportKey(context.Background())\n  if err != nil {\n    fmt.Println(\"Error while getting import token: \", err)\n    return\n  }\n  b, _ := json.MarshalIndent(importToken, \"\", \"  \")\n  fmt.Println(string(b))\n}"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "x-try-it-out-example": [
          {
            "in": "header",
            "name": "Authorization",
            "value": ""
          },
          {
            "in": "header",
            "name": "Bluemix-Instance",
            "value": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The import token was successfully retrieved.",
            "content": {
              "application/vnd.ibm.kms.import_token+json": {
                "schema": {
                  "$ref": "#/components/schemas/GetImportToken"
                },
                "example": {
                  "creationDate": "YYYY-MM-DDTHH:MM:SSZ",
                  "expirationDate": "YYYY-MM-DDTHH:MM:SSZ",
                  "maxAllowedRetrievals": 10,
                  "remainingRetrievals": 9,
                  "payload": "...",
                  "nonce": "..."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "An import token was not found in the specified service instance. To create an import token, use  `POST /import_token`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    "errorMsg: 'Not found: An import token was not found in the specified service instance. To  create an import token, use `POST /import_token`"
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The import token has reached its `maxAllowedRetrievals` or `expirationDate`, and it is no longer available for use. To create a new import token, use `POST /import_token`.\n  \nIn very rare cases, the import token may expire before its expiration time. Ensure that your client application is configured with a retry mechanism for catching and responding to `409` conflict exceptions.  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    "errorMsg: 'Conflict: The import token has reached its `maxAllowedRetrievals` or `expirationDate`. To  create a new import token, use `POST /import_token`. "
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v2/keys/{id}/registrations/{urlEncodedResourceCRN}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/KeyId"
        },
        {
          "$ref": "#/components/parameters/UrlEncodedResourceCRN"
        },
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "post": {
        "summary": "Create a registration",
        "tags": [
          "Registrations"
        ],
        "description": "**Service to service calls only.** Creates a registration between a root key and a cloud resource, such as a Cloud Object Storage bucket. The key is identified by its ID, and the cloud resource is identified by its Cloud Resource Name (CRN).",
        "x-visible-environment": "staging",
        "operationId": "createRegistration",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "The base request for creating a registration.",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegistration"
              },
              "example": {
                "metadata": {
                  "collectionType": "application/vnd.ibm.kms.registration_input+json",
                  "collectionTotal": 1
                },
                "resources": {
                  "preventKeyDeletion": true,
                  "description": "string"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X POST \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/registrations/<url_encoded_CRN> \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.registration_input+json\",\n      \"collectionTotal\": 1\n    },\n    \"resources\":[\n      {\n        \"preventKeyDeletion\": true,\n        \"description\": \"...\"\n      }\n    ]\n  }'"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "responses": {
          "200": {
            "description": "A registration with identical properties (`keyId`, `resourceCrn`, `preventKeyDeletion`, `description`, and `registrationMetadata`)  was previously created between the specified key and cloud resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.registration+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "keyId": "string",
                      "resourceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<bucket-name>",
                      "createdBy": "string",
                      "creationDate": "2010-01-12T05:23:19+0000",
                      "updatedBy": "string",
                      "lastUpdated": "2010-01-12T05:23:19+0000",
                      "description": "string",
                      "preventKeyDeletion": true,
                      "keyVersion": {
                        "id": "string",
                        "creationDate": "2010-01-12T05:23:19+0000"
                      }
                    }
                  ]
                }
              }
            }
          },
          "201": {
            "description": "A new registration was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            }
          },
          "400": {
            "description": "The registration could not be created due to a malformed `urlEncodedResourceCRN`, an invalid or missing request body, or an invalid key ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be created. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "INVALID_PARAM_ERR",
                        "message": "The param 'urlEncodedResourceCRN' must be: specified to no more than 10 segments",
                        "status": 400,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect",
                        "target": {
                          "type": "param",
                          "name": "urlEncodedResourceCRN"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRegistration"
          },
          "404": {
            "description": "The key with specified ID could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be created. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "KEY_NOT_FOUND",
                        "message": "Key does not exist",
                        "status": 404,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "A registration with different properties already exists between the specified key and cloud resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be created. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "REGISTRATION_DUP_ERR",
                        "message": "Registration already exists",
                        "status": 409,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                      }
                    ]
                  }
                }
              }
            }
          },
          "422": {
            "description": "The key with specified ID is invalid for use with registrations.\nA key must be a root key (non-extractable) in the Activated (1) state.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be created. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "KEY_INVALID_STATE_ERR",
                        "message": "Key is not in a valid state",
                        "status": 422,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update a registration",
        "tags": [
          "Registrations"
        ],
        "description": "**Service to service calls only.** Updates an existing registration based on the properties that you specify.\n  \nWhen you call `PATCH /registrations`, Key Protect updates only the properties that you specify in the request entity-body. To replace the registration, use `PUT /registrations`.",
        "x-visible-environment": "staging",
        "operationId": "updateRegistration",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "The base request for updating a registration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegistration"
              },
              "example": {
                "metadata": {
                  "collectionType": "application/vnd.ibm.kms.registration_input+json",
                  "collectionTotal": 1
                },
                "resources": {
                  "preventKeyDeletion": true,
                  "description": "string"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X PATCH \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/registrations/<url_encoded_CRN> \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.registration_input+json\",\n      \"collectionTotal\": 1\n    },\n    \"resources\":[\n      {\n        \"preventKeyDeletion\": true\n      }\n    ]\n  }'"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "responses": {
          "200": {
            "description": "The registration was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.registration+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "keyId": "string",
                      "resourceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<bucket-name>",
                      "createdBy": "string",
                      "creationDate": "2010-01-12T05:23:19+0000",
                      "updatedBy": "string",
                      "lastUpdated": "2010-01-12T05:23:19+0000",
                      "description": "string",
                      "preventKeyDeletion": true,
                      "keyVersion": {
                        "id": "string",
                        "creationDate": "2010-01-12T05:23:19+0000"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The registration could not be updated due to a malformed `urlEncodedResourceCRN`, an invalid or missing request body, or an invalid key ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be updated. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "INVALID_PARAM_ERR",
                        "message": "The param 'urlEncodedResourceCRN' must be: specified to no more than 10 segments",
                        "status": 400,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect",
                        "target": {
                          "type": "param",
                          "name": "urlEncodedResourceCRN"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRegistration"
          },
          "404": {
            "description": "The registration or key could not be found. Verify that the specified key ID and CRN are valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be updated. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "REGISTRATION_NOT_FOUND_ERR",
                        "message": "Registration does not exist",
                        "status": 404,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Replace a registration",
        "tags": [
          "Registrations"
        ],
        "description": "**Service to service calls only.** Replace an existing registration between a root key and a cloud resource. The key is  identified by its ID, and the cloud resource is identified by its cloud resource name (CRN).\n  \nWhen you call `PUT /registrations`, Key Protect replaces the existing registration with the properties that you provide in the request entity-body.",
        "x-visible-environment": "staging",
        "operationId": "replaceRegistration",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "The base request for replacing a registration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceRegistration"
              },
              "example": {
                "metadata": {
                  "collectionType": "application/vnd.ibm.kms.registration_input+json",
                  "collectionTotal": 1
                },
                "resources": {
                  "preventKeyDeletion": true,
                  "description": "string",
                  "keyVersionId": "84a53643-9ca8-4ff2-9c68-d7842526167b"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X PUT \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/registrations/<url_encoded_CRN> \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>' \\\n  -H 'content-type: application/json' \\\n  -d '{\n    \"metadata\": {\n      \"collectionType\": \"application/vnd.ibm.kms.registration_input+json\",\n      \"collectionTotal\": 1\n    },\n    \"resources\":[\n      {\n        \"preventKeyDeletion\": true,\n        \"description\": \"...\",\n        \"keyVersionId\": <key version ID>\n      }\n    ]\n  }'        "
                    ]
                  }
                ]
              }
            ]
          }
        },
        "responses": {
          "200": {
            "description": "The registration was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.registration+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "keyId": "string",
                      "resourceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<bucket-name>",
                      "createdBy": "string",
                      "creationDate": "2010-01-12T05:23:19+0000",
                      "updatedBy": "string",
                      "lastUpdated": "2010-01-12T05:23:19+0000",
                      "description": "string",
                      "preventKeyDeletion": true,
                      "keyVersion": {
                        "id": "string",
                        "creationDate": "2010-01-12T05:23:19+0000"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The registration could not be replaced due to a malformed `urlEncodedResourceCRN`, an invalid or missing request body, or an invalid key ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be replaced. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "INVALID_PARAM_ERR",
                        "message": "The param 'urlEncodedResourceCRN' must be: specified to no more than 10 segments",
                        "status": 400,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect",
                        "target": {
                          "type": "param",
                          "name": "urlEncodedResourceCRN"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRegistration"
          },
          "404": {
            "description": "The registration or key could not be found. Verify that the specified key ID and CRN are valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be replaced. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "REGISTRATION_NOT_FOUND_ERR",
                        "message": "Registration does not exist",
                        "status": 404,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete a registration",
        "tags": [
          "Registrations"
        ],
        "description": "**Service to service calls only.** Deletes an existing registration between a root key and a cloud resource.\n  \nThis action permanently removes the registration from the Key Protect database. ",
        "x-visible-environment": "staging",
        "operationId": "deleteRegistration",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Prefer"
          }
        ],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X DELETE \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/registrations/<url_encoded_CRN> \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>'"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "responses": {
          "200": {
            "description": "The registration was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.registration+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "keyId": "string",
                      "resourceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<bucket-name>",
                      "createdBy": "string",
                      "creationDate": "2010-01-12T05:23:19+0000",
                      "updatedBy": "string",
                      "lastUpdated": "2010-01-12T05:23:19+0000",
                      "description": "string",
                      "preventKeyDeletion": true,
                      "keyVersion": {
                        "id": "string",
                        "creationDate": "2010-01-12T05:23:19+0000"
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The registration was successfully deleted. No content."
          },
          "400": {
            "description": "The registration could not be deleted due to a malformed `urlEncodedResourceCRN`, an invalid or missing request body, or an invalid key ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "errorMsg": "Registration could not be deleted. Please see `reasons` for more details.",
                      "reasons": [
                        {
                          "code": "INVALID_PARAM_ERR",
                          "message": "The param 'urlEncodedResourceCRN' must be: specified to no more than 10 segments",
                          "status": 400,
                          "moreInfo": "https://cloud.ibm.com/apidocs/key-protect",
                          "target": {
                            "type": "param",
                            "name": "urlEncodedResourceCRN"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRegistration"
          },
          "404": {
            "description": "The registration or key could not be found. Verify that the specified key ID and CRN are valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": [
                    {
                      "errorMsg": "Registration could not be deleted. Please see `reasons` for more details.",
                      "reasons": [
                        {
                          "code": "REGISTRATION_NOT_FOUND_ERR",
                          "message": "Registration does not exist",
                          "status": 404,
                          "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v2/keys/{id}/registrations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/KeyId"
        },
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "get": {
        "summary": "List registrations for a key",
        "tags": [
          "Registrations"
        ],
        "description": "Retrieves a list of registrations that are associated with a specified root key. \n  \nWhen you use a root key to protect an IBM Cloud resource, such as a Cloud Object Storage bucket, Key Protect  creates a registration between the resource and root key. You can use `GET /keys/{id}/registrations` to  understand which cloud resources are protected by the key that you specify.",
        "operationId": "getRegistrations",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RegistrationsLimitParam"
          },
          {
            "$ref": "#/components/parameters/RegistrationsOffsetParam"
          },
          {
            "$ref": "#/components/parameters/UrlEncodedResourceCRNQuery"
          },
          {
            "$ref": "#/components/parameters/PreventKeyDeletion"
          },
          {
            "$ref": "#/components/parameters/TotalCount"
          }
        ],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/<key_ID>/registrations \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>'"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "responses": {
          "200": {
            "description": "The list of registrations was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationWithTotalCount"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.registration+json",
                    "collectionTotal": 2,
                    "totalCount": 4
                  },
                  "resources": [
                    {
                      "keyId": "7f19bee1-4fdf-4646-866e-111c80f94478",
                      "resourceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<bucket-name>",
                      "createdBy": "IBMid-203BRNKPR5",
                      "creationDate": "2019-12-03T05:23:19+0000",
                      "updatedBy": "IBMid-203BRNKPR5",
                      "lastUpdated": "2019-12-03T05:23:19+0000",
                      "description": "Registration between a bucket and root key",
                      "preventKeyDeletion": true,
                      "keyVersion": {
                        "id": "4a0225e9-17a0-46c1-ace7-f25bcf4237d4",
                        "creationDate": "2019-12-03T05:23:19+0000"
                      }
                    },
                    {
                      "keyId": "7f19bee1-4fdf-4646-866e-111c80f94478",
                      "resourceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<other-bucket-name>",
                      "createdBy": "IBMid-203BRNKPR5",
                      "creationDate": "2019-12-02T06:15:00+0000",
                      "updatedBy": "IBMid-203BRNKPR5",
                      "lastUpdated": "2019-12-02T06:15:00+0000",
                      "description": "Registration between the root key and a different bucket",
                      "preventKeyDeletion": true,
                      "keyVersion": {
                        "id": "4a0225e9-17a0-46c1-ace7-f25bcf4237d4",
                        "creationDate": "2019-12-02T06:15:00+0000"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The list of registrations could not be retrieved due to a malformed `urlEncodedResourceCRN`, an invalid or missing request body, or an invalid key ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be deleted. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "INVALID_PARAM_ERR",
                        "message": "The param 'urlEncodedResourceCRNQuery' must be: specified to at least the service instance",
                        "status": 400,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect",
                        "target": {
                          "type": "param",
                          "name": "urlEncodedResourceCRNQuery"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRegistration"
          },
          "404": {
            "description": "The key with specified ID could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be created. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "KEY_NOT_FOUND",
                        "message": "Key does not exist",
                        "status": 404,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v2/keys/registrations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/InstanceParam"
        },
        {
          "$ref": "#/components/parameters/CorrelationId"
        }
      ],
      "get": {
        "summary": "List registrations for any key",
        "tags": [
          "Registrations"
        ],
        "description": "Retrieves a list of registrations that match the Cloud Resource Name (CRN) query that you specify. \n  \nWhen you use a root key to protect an IBM Cloud resource, such as a Cloud Object Storage bucket, Key Protect  creates a registration between the resource and root key. You can use `GET /keys/registrations` to  understand which cloud resources are protected by keys in your Key Protect service instance.",
        "operationId": "getRegistrationsAllKeys",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UrlEncodedResourceCRNQueryOptional"
          },
          {
            "$ref": "#/components/parameters/RegistrationsLimitParam"
          },
          {
            "$ref": "#/components/parameters/RegistrationsOffsetParam"
          },
          {
            "$ref": "#/components/parameters/PreventKeyDeletion"
          },
          {
            "$ref": "#/components/parameters/TotalCount"
          }
        ],
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "lang": "curl",
                    "source": [
                      "curl -X GET \\\n  https://<region>.kms.cloud.ibm.com/api/v2/keys/registrations?urlEncodedResourceCRNQuery=<url_encoded_resource_CRN_query> \\\n  -H 'authorization: Bearer <IAM_token>' \\\n  -H 'bluemix-instance: <instance_ID>'"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "responses": {
          "200": {
            "description": "The list of registrations was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationWithTotalCount"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.registration+json",
                    "collectionTotal": 2,
                    "totalCount": 4
                  },
                  "resources": [
                    {
                      "keyId": "7f19bee1-4fdf-4646-866e-111c80f94478",
                      "resourceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<bucket-name>",
                      "createdBy": "IBMid-203BRNKPR5",
                      "creationDate": "2019-12-03T05:23:19+0000",
                      "updatedBy": "IBMid-203BRNKPR5",
                      "lastUpdated": "2019-12-03T05:23:19+0000",
                      "description": "Registration between a bucket and root key",
                      "preventKeyDeletion": true,
                      "keyVersion": {
                        "id": "4a0225e9-17a0-46c1-ace7-f25bcf4237d4",
                        "creationDate": "2019-12-03T05:23:19+0000"
                      }
                    },
                    {
                      "keyId": "fcc3567c-793e-455f-b576-e2989e2bb170",
                      "resourceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<other-bucket-name>",
                      "createdBy": "IBMid-203BRNKPR5",
                      "creationDate": "2019-12-02T06:15:00+0000",
                      "updatedBy": "IBMid-203BRNKPR5",
                      "lastUpdated": "2019-12-02T06:15:00+0000",
                      "description": "Registration between a bucket and root key",
                      "preventKeyDeletion": true,
                      "keyVersion": {
                        "id": "f58a7cfb-2b8d-4bba-b388-cfb90c3fbf31",
                        "creationDate": "2019-12-02T06:15:00+0000"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The list of registrations could not be retrieved due to a malformed `urlEncodedResourceCRNQuery`, an invalid or missing request body, or a mismatch between the cloud service CRN and the resource CRN.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollectionWithReason"
                },
                "example": {
                  "metadata": {
                    "collectionType": "application/vnd.ibm.kms.error+json",
                    "collectionTotal": 1
                  },
                  "resources": {
                    "errorMsg": "Registration could not be deleted. Please see `reasons` for more details.",
                    "reasons": [
                      {
                        "code": "INVALID_PARAM_ERR",
                        "message": "The param 'urlEncodedResourceCRNQuery' must be: specified to at least the service instance",
                        "status": 400,
                        "moreInfo": "https://cloud.ibm.com/apidocs/key-protect",
                        "target": {
                          "type": "param",
                          "name": "urlEncodedResourceCRNQuery"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRegistration"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "KeyId": {
        "name": "id",
        "in": "path",
        "description": "The v4 UUID that uniquely identifies the key.",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "UrlEncodedResourceCRN": {
        "name": "urlEncodedResourceCRN",
        "in": "path",
        "description": "The URL encoded [Cloud Resource Name (CRN)](/docs/overview?topic=overview-crn) that uniquely  identifies the cloud resource. At minimum, provide a CRN that includes the `service-instance` segment.",
        "schema": {
          "type": "string"
        },
        "required": true,
        "example": "crn%3av1%3abluemix%3apublic%3acloud-object-storage%3aglobal%3aa%2f59bcbfa6ea2f006b4ed7094c1a08dcdd%3a1a0ec336-f391-4091-a6fb-5e084a4c56f4%3a%3abucket"
      },
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5000,
          "default": 200
        },
        "required": false,
        "description": "The number of keys to retrieve. By default, `GET /keys` returns the first 200 keys. To retrieve a different set of keys, use `limit` with `offset` to page through your available resources. The maximum value for `limit` is 5000.\n  \n**Usage:** If you have 20 keys in your instance, and you want to retrieve only the first 5 keys, use  `../keys?limit=5`."
      },
      "OffsetParam": {
        "name": "offset",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "required": false,
        "description": "The number of keys to skip. By specifying `offset`, you retrieve a subset of keys that starts with the `offset` value. Use `offset` with `limit` to page through your available resources.\n  \n**Usage:** If you have 100 keys in your instance, and you want to retrieve keys 26 through 50, use  `../keys?offset=25&limit=25`."
      },
      "KeyVersionsLimitParam": {
        "name": "limit",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5000,
          "default": 200
        },
        "required": false,
        "description": "The number of key versions to retrieve. By default, `GET /versions` returns the first 200 key versions. To retrieve a different set of key versions, use `limit` with `offset` to page through your available resources. The maximum value for `limit` is 5000.\n**Usage:** If you have a key with 20 versions in your instance, and you want to retrieve only the first 5 versions, use `../versions?limit=5`."
      },
      "KeyVersionsOffsetParam": {
        "name": "offset",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "required": false,
        "description": "The number of key versions to skip. By specifying `offset`, you retrieve a subset of key versions that starts with the `offset` value. Use `offset` with `limit` to page through your available resources.\n**Usage:** If you have a key with 100 versions in your instance, and you want to retrieve versions 26 through 50, use `../versions?offset=25&limit=25`."
      },
      "RegistrationsLimitParam": {
        "name": "limit",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5000,
          "default": 200
        },
        "required": false,
        "description": "The number of registrations to retrieve. By default returns the first 200 registrations. To retrieve a different  set of registrations, use `limit` with `offset` to page through your available resources. The maximum value for  `limit` is 5000.\n  \n**Usage:** If you have 20 registrations that are associated with a key, and you want to retrieve only the first  5 registrations, use `../registrations?limit=5`."
      },
      "RegistrationsOffsetParam": {
        "name": "offset",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "required": false,
        "description": "The number of registrations to skip. By specifying `offset`, you retrieve a subset of registrations that starts  with the `offset` value. Use `offset` with `limit` to page through your available resources.\n  \n**Usage:** If you have 100 registrations that are associated with a key, and you want to retrieve registrations  26 through 50, use `../registrations?offset=25&limit=25`."
      },
      "PreventKeyDeletion": {
        "name": "preventKeyDeletion",
        "in": "query",
        "schema": {
          "type": "boolean",
          "nullable": true
        },
        "required": false,
        "description": "Filters registrations based on the `preventKeyDeletion` property. You can use this query parameter to search for registered cloud resources that are non-erasable due to a retention policy.\n**Usage:** To search for registered cloud resources that have a retention policy, use `../registrations?preventKeyDeletion=true`."
      },
      "TotalCount": {
        "name": "totalCount",
        "in": "query",
        "schema": {
          "type": "boolean",
          "nullable": true
        },
        "required": false,
        "description": "If set to `true`, returns `totalCount` in the response metadata for use with pagination. The `totalCount` value  returned specifies the total number of registrations that match the request, disregarding limit and offset.\n  \n**Usage:** To return the `totalCount` value for use with pagination, use `../registrations?totalCount=true`."
      },
      "UrlEncodedResourceCRNQuery": {
        "name": "urlEncodedResourceCRNQuery",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "Filters for resources that are associated with a specified  [Cloud Resource Name (CRN)](/docs/overview?topic=overview-crn) by using URL encoded  wildcard characters (`*`). The parameter should contain all CRN segments and must be URL encoded. Supports a  prefix search when you specify `*` on the last CRN segment. \n  \n**Usage:** To list registrations that are associated with all resources in `<service-instance>`, use a URL encoded  version of the following string: `crn:v1:bluemix:public:<service-name>:<location>:a/<account>:<service-instance>:*:*`.  To search for subresources, use the following CRN format: `crn:v1:bluemix:public:<service-name>:<location>:a/<account>:<service-instance>:<resource-type>:<resource>/<subresource>`.\n  \nFor more examples, see [CRN query examples](/docs/key-protect?topic=key-protect-view-protected-resources#crn-query-examples).",
        "example": "crn%3Av1%3Abluemix%3Apublic%3Adatabases-for-postgresql%3Aus-south%3Aa%2F274074dce64e9c423ffc238516c755e1%3A29caf0e7-120f-4da8-9551-3abf57ebcfc7%3A*%3A*"
      },
      "UrlEncodedResourceCRNQueryOptional": {
        "name": "urlEncodedResourceCRNQuery",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "Filters for resources that are associated with a specified  [Cloud Resource Name (CRN)](docs/overview?topic=overview-crn) by using URL encoded wildcard characters (`*`). The parameter should contain all CRN segments and must be URL encoded. \n  \nIf provided, the parameter should not contain (`*`) in the first eight segments. If this parameter is not provided, registrations for all keys in the requested Key Protect instance are returned.",
        "example": "crn%3Av1%3Abluemix%3Apublic%3Adatabases-for-postgresql%3Aus-south%3Aa%2F274074dce64e9c423ffc238516c755e1%3A29caf0e7-120f-4da8-9551-3abf57ebcfc7%3A*%3A*"
      },
      "Force": {
        "name": "force",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false,
        "description": "If set to `true`, Key Protect forces deletion on a key that is protecting a cloud resource, such as a Cloud  Object Storage bucket. The action removes any registrations that are associated with the key.\n  \n**Note:** If a key is protecting a cloud resource that has a retention policy, Key Protect cannot delete the key.  Use `GET keys/{id}/registrations` to review registrations between the key and its associated cloud resources.  To enable deletion, contact an account owner to remove the retention policy on each resource that is associated  with this key. "
      },
      "RegistrationAction": {
        "description": "The action to perform on the specified key.",
        "name": "action",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "deactivate"
          ]
        },
        "required": true
      },
      "KeyPolicyType": {
        "description": "The type of policy that is associated with the specified key.",
        "in": "query",
        "name": "policy",
        "required": false,
        "schema": {
          "enum": [
            "dualAuthDelete",
            "rotation"
          ],
          "type": "string"
        }
      },
      "InstancePolicyType": {
        "description": "The type of policy that is associated with the specified instance.",
        "in": "query",
        "name": "policy",
        "required": false,
        "schema": {
          "enum": [
            "dualAuthDelete"
          ],
          "type": "string"
        }
      },
      "InstanceParam": {
        "name": "Bluemix-Instance",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "description": "The IBM Cloud instance ID that identifies your Key Protect service instance.",
        "required": true
      },
      "CorrelationId": {
        "name": "Correlation-Id",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "description": "The v4 UUID used to correlate and track transactions.",
        "required": false
      },
      "Prefer": {
        "name": "Prefer",
        "in": "header",
        "schema": {
          "type": "string",
          "enum": [
            "return=representation",
            "return=minimal"
          ]
        },
        "description": "Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.  \n  \n**Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.",
        "required": false
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Your IBM Cloud access token.",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "CollectionMetadata": {
        "description": "The metadata that describes the resource array.",
        "type": "object",
        "required": [
          "collectionType",
          "collectionTotal"
        ],
        "properties": {
          "collectionType": {
            "description": "The type of resources in the resource array.",
            "type": "string",
            "enum": [
              "application/vnd.ibm.kms.crn+json",
              "application/vnd.ibm.kms.error+json",
              "application/vnd.ibm.kms.event_acknowledge+json",
              "application/vnd.ibm.kms.import_token+json",
              "application/vnd.ibm.kms.key_action+json",
              "application/vnd.ibm.kms.key+json",
              "application/vnd.ibm.kms.policy+json",
              "application/vnd.ibm.kms.registration_input+json",
              "application/vnd.ibm.kms.registration+json",
              "application/vnd.ibm.kms.resource_crn+json"
            ]
          },
          "collectionTotal": {
            "description": "The number of elements in the resource array.",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "CollectionMetadataWithTotalCount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          {
            "type": "object",
            "properties": {
              "totalCount": {
                "description": "The total number of registrations that match the request, disregarding limit and offset.",
                "nullable": true,
                "type": "integer",
                "format": "int64",
                "example": 1
              }
            }
          }
        ]
      },
      "CreateKeyRequestBody": {
        "description": "The base schema for the request body of a `POST /keys`.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateKey"
            }
          }
        }
      },
      "ImportKeyRequestBody": {
        "description": "The base schema for the request body of a `POST /keys`.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportKey"
            }
          }
        }
      },
      "ImportKeyWithImportTokenRequestBody": {
        "description": "The base schema for the request body of a `POST /keys`.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportKeyWithImportToken"
            }
          }
        }
      },
      "CreateKeyOneOf": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateKeyRequestBody"
          },
          {
            "$ref": "#/components/schemas/ImportKeyRequestBody"
          },
          {
            "$ref": "#/components/schemas/ImportKeyWithImportTokenRequestBody"
          }
        ]
      },
      "CreateKey": {
        "description": "The base schema for the resource given in the Create Key request body.",
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyResource"
          },
          {
            "type": "object",
            "required": [
              "name",
              "type"
            ]
          }
        ]
      },
      "DualAuthKeyMetadata": {
        "description": "Metadata that indicates the status of a dual authorization policy on the key.",
        "type": "object",
        "nullable": true,
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "description": "The status of a dual authorization policy on the key. \n  \nIf `true`, dual authorization is required to delete the key. If `false`, no prior authorization is required  to delete the key.",
            "type": "boolean",
            "example": true
          },
          "keySetForDeletion": {
            "description": "Indicates if a delete authorization has been issued for a key.\n  \nIf `true`, an authorization to delete this key has been issued by the first user, and a second user with  a Manager access policy can safely delete the key. If the `enabled` property is `false`, this field is  omitted in the response body.",
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "authExpiration": {
            "description": "The date that an authorization for deletion expires for the key. If this date has passed, the  authorization is no longer valid. If the `enabled` or `keySetForDeletion` properties are `false`, this  field is omitted in the response body.",
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          }
        }
      },
      "ImportKey": {
        "description": "The base schema for the resource given in the Import Key request body.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateKey"
          },
          {
            "type": "object",
            "required": [
              "payload"
            ],
            "properties": {
              "payload": {
                "$ref": "#/components/schemas/ImportPayload"
              }
            }
          }
        ]
      },
      "ImportPayload": {
        "description": "The key material that you want to store and manage in the service.\n  \nTo import a key, provide a base64 encoded payload in the request entity-body. If you're importing a root key, ensure that the key is 128, 192, or 256 bits in length.\n  \n**Note:**  By default, Key Protect encrypts your key material while it's in transit by using the Transport Layer Security (TLS) 1.2 protocol. If your workload requires a security mechanism beyond TLS, you can use an import token to encrypt and import root keys to the service. [Learn more](/docs/key-protect?topic=key-protect-importing-keys#using-import-tokens)",
        "type": "string",
        "format": "byte",
        "writeOnly": true
      },
      "ImportKeyWithImportToken": {
        "description": "The base schema for the resource given in the Import Key With Import Token request body.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateKey"
          },
          {
            "$ref": "#/components/schemas/SecureImport"
          }
        ]
      },
      "RestoreKey": {
        "description": "The base schema for the resource given in the Restore key request body.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "payload"
            ],
            "properties": {
              "payload": {
                "$ref": "#/components/schemas/ImportPayload"
              }
            }
          }
        ]
      },
      "RestoreKeyWithImportToken": {
        "description": "The base schema for the resource given in the Restore Key With Import Token request body.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SecureImport"
          }
        ]
      },
      "ListKeys": {
        "description": "The base schema for listing keys.",
        "required": [
          "metadata"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyRepresentation"
            }
          }
        }
      },
      "ListKeyVersions": {
        "description": "Properties associated with a registration response.",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "An array of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyVersion"
            }
          }
        }
      },
      "GetKey": {
        "description": "The base schema for retrieving keys.",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyWithPayload"
            }
          }
        }
      },
      "GetKeyMetadata": {
        "description": "The base schema for retrieving key metadata.",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyFullRepresentation"
            }
          }
        }
      },
      "GetImportToken": {
        "description": "The base schema for retrieving an import token.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportToken"
          },
          {
            "type": "object",
            "properties": {
              "payload": {
                "description": "The public encryption key that you can use to encrypt key material before you import it into the service. \n  \nThis value is a PEM-encoded public key in PKIX format. Because PEM encoding is a byte format, the value is base64 encoded.",
                "type": "string",
                "format": "byte",
                "maxLength": 4096,
                "readOnly": true
              },
              "nonce": {
                "description": "The nonce value that is used to verify a key import request. Encrypt and provide the encrypted nonce value when you use `POST /keys` to securely import a key to the service.",
                "type": "string",
                "format": "byte",
                "readOnly": true
              }
            }
          }
        ]
      },
      "DeleteKey": {
        "description": "The base schema for deleting keys.",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyWithPayload"
            }
          }
        }
      },
      "DeleteKeyResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyWithPayload"
          },
          {
            "$ref": "#/components/schemas/DeleteProperties"
          }
        ]
      },
      "DeleteProperties": {
        "type": "object",
        "description": "Properties returned only for DELETE",
        "properties": {
          "deleted": {
            "description": "A boolean that determines whether the key has been deleted.",
            "type": "boolean",
            "readOnly": true
          },
          "deletionDate": {
            "description": "The date the key material was destroyed. The date format follows RFC 3339.",
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          },
          "deletedBy": {
            "description": "The unique identifier for the resource that deleted the key.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "KeyRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyResource"
          },
          {
            "$ref": "#/components/schemas/KeyMetadata"
          },
          {
            "type": "object",
            "properties": {
              "dualAuthDelete": {
                "$ref": "#/components/schemas/DualAuthKeyMetadata"
              }
            }
          }
        ]
      },
      "KeyFullRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyRepresentation"
          },
          {
            "$ref": "#/components/schemas/DeleteProperties"
          }
        ]
      },
      "KeyWithPayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyFullRepresentation"
          },
          {
            "type": "object",
            "properties": {
              "payload": {
                "description": "The key material that you can export to external apps or services.    \n      \n**Note:** If the key has been designated as a root key, the system cannot return the key material. ",
                "readOnly": true,
                "type": "string",
                "format": "byte"
              }
            }
          }
        ]
      },
      "GetMultipleKeyPolicies": {
        "description": "The base schema for retrieving all key policies.",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetKeyPolicy"
                },
                {
                  "$ref": "#/components/schemas/KeyPolicyDualAuthDeleteNonRequired"
                },
                {
                  "$ref": "#/components/schemas/KeyPolicyRotationNonRequired"
                }
              ]
            }
          }
        }
      },
      "GetKeyPolicyDualAuthDelete": {
        "description": "The base schema for retrieving a dual authorization key policy.",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetKeyPolicy"
                },
                {
                  "$ref": "#/components/schemas/KeyPolicyDualAuthDelete"
                }
              ]
            }
          }
        }
      },
      "GetKeyPolicyRotation": {
        "description": "The base schema for retrieving a dual authorization key policy.",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetKeyPolicy"
                },
                {
                  "$ref": "#/components/schemas/KeyPolicyRotation"
                }
              ]
            }
          }
        }
      },
      "ErrorCollection": {
        "description": "The base schema for error responses.",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ErrorCollectionWithReason": {
        "description": "The base schema for error responses that MAY include a fine grain reason.",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/ErrorWithReason"
            }
          }
        }
      },
      "WrapUnwrapRequestFields": {
        "description": "Properties associated with the request body of wrap, unwrap and rewrap actions.",
        "type": "object",
        "properties": {
          "aad": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The additional authentication data (AAD) used to further secure the key. \n  \nIf you supply AAD when you make a `wrap` call, you must specify the same AAD during a subsequent `unwrap` call. ",
            "minLength": 0,
            "maxLength": 255,
            "minItems": 0,
            "maxItems": 126,
            "writeOnly": true
          }
        }
      },
      "WrapPlaintext": {
        "description": "Properties that are associated with the wrap plaintext.",
        "type": "object",
        "properties": {
          "plaintext": {
            "type": "string",
            "description": "The data encryption key (DEK) used in wrap actions when the query parameter is set to `wrap`. The system returns a base64 encoded plaintext in the response entity-body when you perform an `unwrap` action on a key.\n  \nTo wrap an existing DEK, provide a base64 encoded plaintext during a `wrap` action. To generate a new DEK, omit the `plaintext` property. Key Protect generates a random plaintext (32 bytes) that is rooted in an HSM and then wraps that value. \n  \n**Note:** When you unwrap a wrapped data encryption key (WDEK) by using a rotated root key, the service returns a new ciphertext in the response entity-body. Each ciphertext remains available for `unwrap` actions.  If you unwrap a DEK with a previous ciphertext, the service also returns the latest ciphertext in the response.  Use the latest ciphertext for future unwrap operations.",
            "maxLength": 4096
          }
        }
      },
      "UnwrapCiphertext": {
        "description": "Properties that are associated with the unwrap ciphertext.",
        "type": "object",
        "properties": {
          "ciphertext": {
            "type": "string",
            "description": "The wrapped data encryption key (WDEK) that you can export to your app or service. The value is base64 encoded."
          }
        }
      },
      "RewrapCiphertext": {
        "description": "Properties that are associated with the rewrap ciphertext",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UnwrapCiphertext"
          },
          {
            "type": "object",
            "properties": {
              "ciphertext": {
                "description": "The wrapped data encryption key (WDEK) that you want to re-encrypt by using the latest key version. The value must be base64 encoded."
              }
            }
          }
        ]
      },
      "WrappedKeyVersion": {
        "description": "Properties that are associated with the wrapped key version.",
        "type": "object",
        "properties": {
          "keyVersion": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyVersion"
              },
              {
                "description": "The key version that was used to wrap the DEK. This key version is associated with the `ciphertext` value that was used in the request."
              }
            ]
          }
        }
      },
      "RewrappedKeyVersion": {
        "description": "Properties that are associated with the rewrapped key version.",
        "type": "object",
        "properties": {
          "rewrappedKeyVersion": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyVersion"
              },
              {
                "description": "The latest key version that was used to rewrap the DEK. This key version is associated with the `ciphertext` value that's returned in the response."
              }
            ]
          }
        }
      },
      "WrapKeyRequestBody": {
        "description": "Properties that are associated with the request body of a wrap action.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WrapPlaintext"
          },
          {
            "$ref": "#/components/schemas/WrapUnwrapRequestFields"
          }
        ]
      },
      "WrapKeyResponseBody": {
        "description": "Properties that are associated with the response body of a wrap action.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WrapPlaintext"
          },
          {
            "$ref": "#/components/schemas/UnwrapCiphertext"
          },
          {
            "$ref": "#/components/schemas/WrappedKeyVersion"
          },
          {
            "required": [
              "ciphertext"
            ]
          }
        ]
      },
      "UnwrapKeyRequestBody": {
        "description": "Properties that are associated with the request body of a unwrap action.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UnwrapCiphertext"
          },
          {
            "$ref": "#/components/schemas/WrapUnwrapRequestFields"
          },
          {
            "required": [
              "ciphertext"
            ]
          }
        ]
      },
      "UnwrapKeyResponseBody": {
        "description": "Properties that are associated with the response body of an unwrap action.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WrapPlaintext"
          },
          {
            "$ref": "#/components/schemas/UnwrapCiphertext"
          },
          {
            "$ref": "#/components/schemas/WrappedKeyVersion"
          },
          {
            "$ref": "#/components/schemas/RewrappedKeyVersion"
          },
          {
            "required": [
              "plaintext"
            ]
          }
        ]
      },
      "RewrapKeyRequestBody": {
        "description": "Properties that are associated with the request body of a rewrap action.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewrapCiphertext"
          },
          {
            "$ref": "#/components/schemas/WrapUnwrapRequestFields"
          },
          {
            "required": [
              "ciphertext"
            ]
          }
        ]
      },
      "RewrapKeyResponseBody": {
        "description": "Properties that are associated with the response body of an rewrap action.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UnwrapCiphertext"
          },
          {
            "$ref": "#/components/schemas/WrappedKeyVersion"
          },
          {
            "$ref": "#/components/schemas/RewrappedKeyVersion"
          },
          {
            "required": [
              "ciphertext"
            ]
          }
        ]
      },
      "RotateKeyBody": {
        "description": "Base schema for the request body of a rotate action.",
        "type": "object",
        "properties": {
          "payload": {
            "description": "The key material that you want to import into the service for rotating an existing root key. This value is required for a `rotate` action if you initially imported the key material when you created the key.\n   \nTo rotate an imported root key, provide a base64 encoded payload in the request entity-body. To rotate a root key that was initially generated by Key Protect, omit the `payload` property and pass in an empty request entity-body.",
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "SecureRotateKeyBody": {
        "description": "Base schema for the request body of a secure rotate action.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RotateKeyBody"
          },
          {
            "$ref": "#/components/schemas/SecureImport"
          }
        ]
      },
      "ImportToken": {
        "description": "Properties that are associated with import tokens.",
        "type": "object",
        "properties": {
          "expiration": {
            "description": "The time in seconds from the creation of an import token that determines how long its associated public key  remains valid.\n   \nThe minimum value is `300` seconds (5 minutes), and the maximum value is `86400` (24 hours). The default value is `600` (10 minutes).",
            "type": "number",
            "minimum": 300,
            "maximum": 86400,
            "default": 600
          },
          "maxAllowedRetrievals": {
            "description": "The number of times that an import token can be retrieved within its expiration time before it is no longer accessible. ",
            "type": "number",
            "minimum": 1,
            "maximum": 500,
            "default": 1
          },
          "creationDate": {
            "description": "The date the import token was created. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "example": "2018-04-12T23:20:50.52Z",
            "readOnly": true
          },
          "expirationDate": {
            "description": "The date the import token expires. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "example": "2018-12-01T23:20:50.52Z",
            "readOnly": true
          },
          "remainingRetrievals": {
            "description": "The number of retrievals that are available for the import token before it is no longer accessible.  ",
            "type": "number",
            "minimum": 1,
            "default": 1,
            "readOnly": true
          }
        }
      },
      "SecureImport": {
        "description": "Additional properties that are associated with importing a key with an import token.",
        "type": "object",
        "required": [
          "payload",
          "encryptedNonce",
          "iv",
          "encryptionAlgorithm"
        ],
        "properties": {
          "payload": {
            "description": "The encrypted key material that you want to store and manage in the service. The value must be base64 encoded.\n  \nFirst, retrieve the public key that is associated with your service instance by calling `GET /import_token`.  Then, use the public key to run RSA encryption on the key material that you want to import to the service.",
            "type": "string",
            "format": "byte",
            "writeOnly": true
          },
          "encryptedNonce": {
            "description": "The encrypted nonce value that protects a key import request against replay attacks. This value must be encrypted by using the encrypted `payload` value that represents the key that you want to import into the service.\n  \nTo retrieve a nonce value, use `GET /import_token`. Then, encrypt the value by using an AES-GCM encryption  method that is compatible with your environment. ",
            "type": "string",
            "format": "byte",
            "writeOnly": true
          },
          "iv": {
            "description": "The initialization vector (IV) that is generated by the AES-GCM algorithm when you encrypt a nonce. The IV  value is required to decrypt the encrypted nonce value that you provide when you make a key import request  to the service.\n  \nTo generate an IV, encrypt the `nonce` value by using an AES-GCM encryption method that is compatible with your environment. Then, supply the generated IV value when you import a key to the service.",
            "type": "string",
            "format": "byte",
            "writeOnly": true,
            "minLength": 12
          },
          "encryptionAlgorithm": {
            "description": "The RSA encryption algorithm that is used to encrypt the key material that you want to import into the  service. Currently, `RSAES_OAEP_SHA_256` is supported.",
            "type": "string",
            "example": "RSAES_OAEP_SHA_256",
            "writeOnly": true
          }
        }
      },
      "KeyActionOneOf": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WrapKeyRequestBody"
          },
          {
            "$ref": "#/components/schemas/UnwrapKeyRequestBody"
          },
          {
            "$ref": "#/components/schemas/RewrapKeyRequestBody"
          },
          {
            "$ref": "#/components/schemas/RotateKeyBody"
          },
          {
            "$ref": "#/components/schemas/SecureRotateKeyBody"
          }
        ]
      },
      "KeyActionOneOfResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WrapKeyResponseBody"
          },
          {
            "$ref": "#/components/schemas/UnwrapKeyResponseBody"
          },
          {
            "$ref": "#/components/schemas/RewrapKeyResponseBody"
          }
        ]
      },
      "Key": {
        "description": "Properties associated with a key response.",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyWithPayload"
            }
          }
        }
      },
      "KeyResource": {
        "description": "Properties that describe a key.",
        "type": "object",
        "properties": {
          "type": {
            "description": "Specifies the MIME type that represents the key resource. Currently, only the default is supported.",
            "type": "string",
            "default": "application/vnd.ibm.kms.key+json"
          },
          "id": {
            "description": "The v4 UUID used to uniquely identify the resource, as specified by RFC 4122.",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "A unique, human-readable alias to assign to your key.\n  \nTo protect your privacy, do not use personal data, such as your name or location, as an alias for your key.",
            "type": "string",
            "pattern": "[a-zA-Z0-9 ]{2,50}",
            "minLength": 2,
            "maxLength": 50
          },
          "description": {
            "description": "A text field used to provide a more detailed description of the key. The maximum length is 240 characters.\n  \nTo protect your privacy, do not use personal data, such as your name or location, as a description for your  key.",
            "type": "string",
            "minLength": 2,
            "maxLength": 240
          },
          "tags": {
            "description": "Up to 30 tags can be created. Tags can be between 2-30 characters, including spaces. Special characters not permitted include the angled bracket, comma, colon, ampersand, and vertical pipe character (|).\n  \nTo protect your privacy, do not use personal data, such as your name or location, as a tag for your key. ",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "integer",
            "description": "The key state based on NIST SP 800-57. States are integers and correspond to the Pre-activation = 0, Active = 1,  Suspended = 2, Deactivated = 3, and Destroyed = 5 values.",
            "readOnly": true,
            "enum": [
              0,
              1,
              2,
              3,
              5
            ]
          },
          "expirationDate": {
            "description": "The date the key material expires. The date format follows RFC 3339. You can set an expiration date on any  key on its creation. If you create a key without specifying an expiration date, the key does not expire.",
            "type": "string",
            "format": "date-time",
            "writeOnly": true,
            "nullable": true,
            "example": "2018-12-01T23:20:50.52Z"
          },
          "extractable": {
            "description": "A boolean that determines whether the key material can leave the service. \n    \nIf set to `false`, Key Protect designates the key as a nonextractable root key used for `wrap` and `unwrap` actions. If set to `true`, Key Protect designates the key as a standard key that you can store in your apps and services. Once set to `false` it cannot be changed to `true`.",
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "crn": {
            "description": "The Cloud Resource Name (CRN) that uniquely identifies your cloud resources.",
            "type": "string",
            "readOnly": true,
            "example": "crn:v1:bluemix:public:kms:<region>:a/<account-id>:<service-instance>:key:<key-id>"
          },
          "imported": {
            "description": "A boolean that shows whether your key was originally imported or generated in Key Protect. The value is set  by Key Protect based on how the key material is initially added to the service.\n  \nA value of `true` indicates that you must provide new key material when it's time to rotate the key. A value  of `false` indicates that Key Protect will generate the new key material on a `rotate` operation, as it did in key creation.",
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "KeyMetadata": {
        "description": "Additional properties that describe a key.",
        "type": "object",
        "properties": {
          "creationDate": {
            "description": "The date the key material was created. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "example": "2018-04-12T23:20:50.52Z"
          },
          "createdBy": {
            "description": "The unique identifier for the resource that created the key.",
            "type": "string",
            "readOnly": true
          },
          "algorithmType": {
            "description": "The algorithm type used to generate the key. Currently, AES is supported.",
            "type": "string",
            "enum": [
              "AES"
            ],
            "default": "AES",
            "readOnly": true
          },
          "algorithmMetadata": {
            "description": "The metadata for the key algorithm.",
            "type": "object",
            "readOnly": true,
            "nullable": true,
            "properties": {
              "bitLength": {
                "description": "The algorithm bit size used for key encryption.",
                "type": "string",
                "enum": [
                  "128",
                  "192",
                  "256"
                ],
                "default": "256"
              },
              "mode": {
                "description": "The encryption scheme used to generate the key. Currently, `CBC_PAD` is supported.",
                "type": "string",
                "enum": [
                  "CBC_PAD"
                ],
                "default": "CBC_PAD"
              }
            }
          },
          "algorithmBitSize": {
            "description": "The algorithm bit size used for key encryption.",
            "type": "integer",
            "enum": [
              128,
              192,
              256
            ],
            "default": 256
          },
          "algorithmMode": {
            "description": "The encryption scheme used to generate the key. Currently, `CBC_PAD` is supported.",
            "type": "string",
            "enum": [
              "CBC_PAD"
            ],
            "default": "CBC_PAD"
          },
          "nonactiveStateReason": {
            "description": "A code indicating the reason the key is not in the activation state.",
            "type": "integer",
            "readOnly": true
          },
          "lastUpdateDate": {
            "description": "Updates when any part of the key metadata is modified. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "example": "2018-04-12T23:20:50.52Z"
          },
          "lastRotateDate": {
            "description": "Updates to show when the key was last rotated. The date format follows RFC 3339.",
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "readOnly": true,
            "example": "2018-04-12T23:20:50.52Z"
          },
          "keyVersion": {
            "$ref": "#/components/schemas/KeyVersion"
          }
        }
      },
      "KeyVersion": {
        "description": "Properties associated with a specific key version.",
        "type": "object",
        "readOnly": true,
        "nullable": true,
        "properties": {
          "id": {
            "description": "The ID of the key version.",
            "type": "string",
            "readOnly": true,
            "example": "4a0225e9-17a0-46c1-ace7-f25bcf4237d4"
          },
          "creationDate": {
            "description": "The date that the version of the key was created.",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          }
        }
      },
      "SetMultipleInstancePolicies": {
        "description": "Properties that are associated with instance level policies.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of instance policies.",
            "type": "array",
            "items": {
              "description": "Different types of instance policies.",
              "type": "object",
              "properties": {
                "Dual Auth Policy": {
                  "$ref": "#/components/schemas/SetDualAuthDeleteParameters"
                },
                "Allowed Network Policy": {
                  "$ref": "#/components/schemas/SetAllowedNetworkParameters"
                }
              }
            }
          }
        }
      },
      "SetInstancePolicyDualAuthDelete": {
        "description": "Properties that are associated with a dual authorization delete instance policy.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "description": "Properties that are associated with instance policies.",
              "type": "object",
              "required": [
                "policy_type",
                "policy_data"
              ],
              "properties": {
                "policy_type": {
                  "description": "The type of policy to be set.",
                  "type": "string",
                  "example": "dualAuthDelete",
                  "enum": [
                    "dualAuthDelete"
                  ]
                },
                "policy_data": {
                  "$ref": "#/components/schemas/DualAuthDeleteProperties"
                }
              }
            }
          }
        }
      },
      "DualAuthDeleteProperties": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "description": "Data associated with the policy type dualAuthDelete.",
        "properties": {
          "enabled": {
            "description": "If set to `true`, Key Protect enables a dual authorization deletion policy for your service instance.\n  \nBy default, Key Protect requires only one authorization to delete a key. After you  enable a dual authorization policy, any new key that you create or add to the  instance will require an authorization from two users to delete keys.\n  \n**Note:** This change does not affect existing keys in your instance.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "InstancePolicyEnabledProperty": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "description": "Property that determines whether an instance policy is active",
        "properties": {
          "enabled": {
            "description": "If set to `true`, Key Protect enables the specified policy for your service instance. If set to `false`, Key Protect disables the specified policy for your service instance, and the policy will no longer  affect Key Protect actions.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "SetMultipleKeyPolicies": {
        "description": "Properties that are associated with key.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "description": "Properties that are associated with instance policies.",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/KeyPolicyDualAuthDeleteNonRequired"
                },
                {
                  "$ref": "#/components/schemas/KeyPolicyRotationNonRequired"
                }
              ]
            }
          }
        }
      },
      "SetKeyPolicyDualAuthDelete": {
        "description": "Base schema for request of create/update of key level dual authorization delete policy.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/KeyPolicyDualAuthDelete"
            }
          }
        }
      },
      "KeyPolicyDualAuthDelete": {
        "description": "Properties that are associated with key level dual authorization delete policy.",
        "required": [
          "type",
          "dualAuthDelete"
        ],
        "properties": {
          "type": {
            "description": "Specifies the MIME type that represents the policy resource. Currently, only the default is supported.",
            "type": "string",
            "example": "application/vnd.ibm.kms.policy+json",
            "enum": [
              "application/vnd.ibm.kms.policy+json"
            ]
          },
          "dualAuthDelete": {
            "type": "object",
            "required": [
              "enabled"
            ],
            "description": "Data associated with the dual authorization delete policy.",
            "properties": {
              "enabled": {
                "description": "If set to `true`, Key Protect enables a dual authorization policy on a single key.\n  \nAfter you enable the policy, Key Protect requires an authorization from two users to delete this key.  For example, you can authorize the deletion first by using the [SetKeyForDeletion](#invoke-an-action-on-a-key)  action. Then, a different user provides a second authorization implicitly by calling `DELETE /keys` to  delete the key.\n**Note:** Once the dual authorization policy is set on the key, it cannot be reverted.",
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "KeyPolicyDualAuthDeleteNonRequired": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "Specifies the MIME type that represents the policy resource. Currently, only the default is supported.",
            "type": "string",
            "example": "application/vnd.ibm.kms.policy+json",
            "enum": [
              "application/vnd.ibm.kms.policy+json"
            ]
          },
          "dualAuthDelete": {
            "type": "object",
            "required": [
              "enabled"
            ],
            "description": "Data associated with the dual authorization delete policy.",
            "properties": {
              "enabled": {
                "description": "If set to `true`, Key Protect enables a dual authorization policy on a single key.\n  \nAfter you enable the policy, Key Protect requires an authorization from two users to delete this key.  For example, you can authorize the deletion first by using the [SetKeyForDeletion](#invoke-an-action-on-a-key)  action. Then, a different user provides a second authorization implicitly by calling `DELETE /keys` to  delete the key.\n**Note:** Once the dual authorization policy is set on the key, it cannot be reverted.",
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "SetKeyPolicyRotation": {
        "description": "Base schema for request of create/update of key level rotation policy.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/KeyPolicyRotation"
            }
          }
        }
      },
      "KeyPolicyRotation": {
        "required": [
          "type",
          "rotation"
        ],
        "properties": {
          "type": {
            "description": "Specifies the MIME type that represents the policy resource. Currently, only the default is supported.",
            "type": "string",
            "example": "application/vnd.ibm.kms.policy+json",
            "enum": [
              "application/vnd.ibm.kms.policy+json"
            ]
          },
          "rotation": {
            "type": "object",
            "required": [
              "interval_month"
            ],
            "description": "Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12.",
            "properties": {
              "interval_month": {
                "description": "Specifies the key rotation time interval in months",
                "type": "integer",
                "minimum": 1,
                "maximum": 12,
                "example": 1
              }
            }
          }
        }
      },
      "KeyPolicyRotationNonRequired": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "Specifies the MIME type that represents the policy resource. Currently, only the default is supported.",
            "type": "string",
            "example": "application/vnd.ibm.kms.policy+json",
            "enum": [
              "application/vnd.ibm.kms.policy+json"
            ]
          },
          "rotation": {
            "type": "object",
            "required": [
              "interval_month"
            ],
            "description": "Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12.",
            "properties": {
              "interval_month": {
                "description": "Specifies the key rotation time interval in months",
                "type": "integer",
                "minimum": 1,
                "maximum": 12,
                "example": 1
              }
            }
          }
        }
      },
      "GetKeyPolicy": {
        "description": "Properties that are associated with rotation policy.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "The v4 UUID used to uniquely identify the policy resource, as specified by RFC 4122.",
            "type": "string",
            "readOnly": true
          },
          "crn": {
            "description": "The Cloud Resource Name (CRN) that uniquely identifies your cloud resources.",
            "type": "string",
            "readOnly": true,
            "example": "crn:v1:bluemix:public:kms:<region>:a/<account-id>:<service-instance:policy:<policy-id>"
          },
          "creationDate": {
            "description": "The date the policy was created. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          },
          "createdBy": {
            "description": "The unique identifier for the resource that created the policy.",
            "type": "string",
            "readOnly": true
          },
          "lastUpdateDate": {
            "description": "Updates when the policy is replaced or modified. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          },
          "updatedBy": {
            "description": "The unique identifier for the resource that updated the policy.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "GetMultipleInstancePolicies": {
        "description": "Properties that are associated with the instance level policies.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstancePolicyResource"
            }
          }
        }
      },
      "InstancePolicyResource": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "Dual Auth Policy": {
                "description": "Properties that are associated with a dual auth policy.",
                "type": "object",
                "required": [
                  "policy_type",
                  "policy_data"
                ],
                "properties": {
                  "policy_type": {
                    "description": "The type of policy to be retrieved.",
                    "type": "string"
                  },
                  "policy_data": {
                    "$ref": "#/components/schemas/DualAuthDeleteProperties"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InstancePolicyMetadata"
                  }
                ]
              },
              "Allowed Network Policy": {
                "description": "Properties that are associated with an allowed network policy.",
                "type": "object",
                "required": [
                  "policy_type",
                  "policy_data"
                ],
                "properties": {
                  "policy_type": {
                    "description": "The type of policy to be retrieved.",
                    "type": "string"
                  },
                  "policy_data": {
                    "$ref": "#/components/schemas/NetworkPolicyProperties"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InstancePolicyMetadata"
                  }
                ]
              }
            }
          }
        ]
      },
      "InstancePolicyProperties": {
        "type": "object",
        "description": "Properties that are associated with any instance policy.",
        "allOf": [
          {
            "$ref": "#/components/schemas/InstancePolicyEnabledProperty"
          }
        ]
      },
      "SetInstancePolicyAllowedNetwork": {
        "description": "Properties that are associated with an allowed network policy.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "description": "Properties that are associated with instance policies.",
              "type": "object",
              "required": [
                "policy_type",
                "policy_data"
              ],
              "properties": {
                "policy_type": {
                  "description": "The type of policy to be set.",
                  "type": "string",
                  "example": "allowedNetwork",
                  "enum": [
                    "allowedNetwork"
                  ]
                },
                "policy_data": {
                  "$ref": "#/components/schemas/NetworkPolicyProperties"
                }
              }
            }
          }
        }
      },
      "SetAllowedNetworkParameters": {
        "description": "Properties that are associated with an allowed network policy.",
        "type": "object",
        "required": [
          "resources"
        ],
        "properties": {
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "description": "Properties that are associated with instance policies.",
              "type": "object",
              "required": [
                "policy_type",
                "policy_data"
              ],
              "properties": {
                "policy_type": {
                  "description": "The type of policy to be set.",
                  "type": "string",
                  "example": "allowedNetwork",
                  "enum": [
                    "allowedNetwork"
                  ]
                },
                "policy_data": {
                  "$ref": "#/components/schemas/NetworkPolicyProperties"
                }
              }
            }
          }
        }
      },
      "SetDualAuthDeleteParameters": {
        "description": "Properties that are associated with a dual authorization delete instance policy.",
        "type": "object",
        "required": [
          "resources"
        ],
        "properties": {
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "description": "Properties that are associated with instance policies.",
              "type": "object",
              "required": [
                "policy_type",
                "policy_data"
              ],
              "properties": {
                "policy_type": {
                  "description": "The type of policy to be set.",
                  "type": "string",
                  "example": "dualAuthDelete",
                  "enum": [
                    "dualAuthDelete"
                  ]
                },
                "policy_data": {
                  "$ref": "#/components/schemas/DualAuthDeleteProperties"
                }
              }
            }
          }
        }
      },
      "NetworkPolicyProperties": {
        "type": "object",
        "description": "Properties that are associated with the policy type `allowedNetwork`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/InstancePolicyEnabledProperty"
          },
          {
            "type": "object",
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/NetworkPolicyAttribute"
              }
            }
          }
        ]
      },
      "NetworkPolicyAttribute": {
        "description": "Properties that are associated with the policy type `allowedNetwork`.",
        "nullable": true,
        "allOf": [
          {
            "type": "object",
            "required": [
              "allowed_network"
            ],
            "properties": {
              "allowed_network": {
                "description": "If set to `public-and-private`, Key Protect allows the instance to be accessible through public and private endpoints. If set to `private-only`, Key Protect restricts the instance to only be accessible through a private endpoint.",
                "type": "string",
                "nullable": true,
                "enum": [
                  "public-and-private",
                  "private-only"
                ]
              }
            }
          }
        ]
      },
      "GetInstancePolicyDualAuthDelete": {
        "description": "Properties that are associated with the instance level dual authorization delete policy.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "description": "Properties that are associated with instance policies.",
              "type": "object",
              "required": [
                "policy_type",
                "policy_data"
              ],
              "properties": {
                "policy_type": {
                  "description": "The type of policy to be retrieved.",
                  "type": "string"
                },
                "policy_data": {
                  "$ref": "#/components/schemas/DualAuthDeleteProperties"
                }
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/InstancePolicyMetadata"
                }
              ]
            }
          }
        }
      },
      "GetInstancePolicyAllowedNetwork": {
        "description": "Properties that are associated with an allowed network policy.",
        "type": "object",
        "required": [
          "metadata",
          "resources"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "description": "Properties that are associated with instance policies.",
              "type": "object",
              "required": [
                "policy_type",
                "policy_data"
              ],
              "properties": {
                "policy_type": {
                  "description": "The type of policy to be retrieved.",
                  "type": "string"
                },
                "policy_data": {
                  "$ref": "#/components/schemas/NetworkPolicyProperties"
                }
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/InstancePolicyMetadata"
                }
              ]
            }
          }
        }
      },
      "InstancePolicyMetadata": {
        "type": "object",
        "description": "Data associated with the any instance policy type.",
        "required": [
          "creationDate",
          "createdBy"
        ],
        "properties": {
          "creationDate": {
            "description": "The date the policy was created. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          },
          "createdBy": {
            "description": "The unique identifier for the resource that created the policy.",
            "type": "string",
            "readOnly": true
          },
          "updatedBy": {
            "description": "The unique identifier for the resource that updated the policy.",
            "type": "string",
            "readOnly": true
          },
          "lastUpdated": {
            "description": "Updates when the policy is replaced or modified. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          }
        }
      },
      "SetInstancePoliciesOneOf": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SetInstancePolicyDualAuthDelete"
          },
          {
            "$ref": "#/components/schemas/SetMultipleInstancePolicies"
          },
          {
            "$ref": "#/components/schemas/SetInstancePolicyAllowedNetwork"
          }
        ]
      },
      "GetInstancePoliciesOneOf": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GetInstancePolicyDualAuthDelete"
          },
          {
            "$ref": "#/components/schemas/GetMultipleInstancePolicies"
          },
          {
            "$ref": "#/components/schemas/GetInstancePolicyAllowedNetwork"
          }
        ]
      },
      "SetKeyPoliciesOneOf": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SetKeyPolicyDualAuthDelete"
          },
          {
            "$ref": "#/components/schemas/SetKeyPolicyRotation"
          },
          {
            "$ref": "#/components/schemas/SetMultipleKeyPolicies"
          }
        ]
      },
      "GetKeyPoliciesOneOf": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GetKeyPolicyDualAuthDelete"
          },
          {
            "$ref": "#/components/schemas/GetKeyPolicyRotation"
          },
          {
            "$ref": "#/components/schemas/GetMultipleKeyPolicies"
          }
        ]
      },
      "Registration": {
        "description": "Properties associated with a registration response.",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistrationResource"
            }
          }
        }
      },
      "RegistrationWithTotalCount": {
        "description": "Properties associated with a list registration response which may include total registration count.",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadataWithTotalCount"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistrationResource"
            }
          }
        }
      },
      "RegistrationResource": {
        "description": "Properties associated with a registration.",
        "type": "object",
        "properties": {
          "keyId": {
            "description": "The ID that identifies the root key that is associated with the specified cloud resource.",
            "type": "string",
            "example": "84a53643-9ca8-4ff2-9c68-d7842526167b",
            "readOnly": true
          },
          "resourceCrn": {
            "description": "The [Cloud Resource Name](https://cloud.ibm.com/docs/overview?topic=overview-crn) (CRN) that represents the  cloud resource, such as a Cloud Object Storage bucket, that is associated with the key.",
            "type": "string",
            "example": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<bucket-name>",
            "readOnly": true
          },
          "createdBy": {
            "description": "The unique identifier for the resource that created the registration.",
            "type": "string",
            "example": "examplecreator@ibm.com",
            "readOnly": true
          },
          "creationDate": {
            "description": "The date the registration was created. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          },
          "updatedBy": {
            "description": "The unique identifier for the resource that updated the registration.",
            "type": "string",
            "example": "exampleupdater@ibm.com",
            "readOnly": true
          },
          "lastUpdated": {
            "description": "Updates when the registration is modified. The date format follows RFC 3339.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2010-01-12T05:23:19+0000"
          },
          "description": {
            "description": "Description of the purpose of the registration.",
            "type": "string",
            "example": "Example description",
            "readOnly": true
          },
          "registrationMetadata": {
            "description": "Additional information about the registration. This field is not exposed to  customers and is visible only with IBM Cloud service to service calls.",
            "type": "string",
            "example": "us-south",
            "readOnly": true
          },
          "preventKeyDeletion": {
            "description": "A boolean that determines whether Key Protect must prevent deletion of a root key.",
            "type": "boolean",
            "example": true,
            "readOnly": true
          },
          "keyVersion": {
            "$ref": "#/components/schemas/KeyVersion"
          }
        }
      },
      "Error": {
        "description": "An error that occurred during the request.",
        "required": [
          "errorMsg"
        ],
        "type": "object",
        "properties": {
          "errorMsg": {
            "description": "The conditions for an error response.",
            "type": "string",
            "example": "Bad Request: ..."
          }
        }
      },
      "ErrorWithReason": {
        "description": "An error that occurred during the request that MAY include a reason.",
        "required": [
          "errorMsg"
        ],
        "type": "object",
        "properties": {
          "errorMsg": {
            "description": "The conditions for an error response.",
            "type": "string"
          },
          "reasons": {
            "type": "array",
            "description": "An array of reasons.",
            "nullable": true,
            "items": {
              "type": "object",
              "title": "Reason",
              "description": "Specific description of why an error occurred.",
              "properties": {
                "code": {
                  "description": "A machine-readable reason code that you can use to find specific details about why an error occurred.",
                  "type": "string"
                },
                "message": {
                  "description": "Human-readable help text that corresponds with a reason code. This text is not suitable for error checking.",
                  "type": "string"
                },
                "status": {
                  "description": "The HTTP status code that's returned in the response.",
                  "type": "integer"
                },
                "moreInfo": {
                  "description": "A link to relevant documentation.",
                  "type": "string"
                },
                "target": {
                  "nullable": true,
                  "type": "object",
                  "title": "Target",
                  "description": "-> The problematic field, query parameter, or header.",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Problematic area.",
                      "enum": [
                        "param",
                        "header",
                        "field"
                      ]
                    },
                    "name": {
                      "description": "Specific problematic field, param or header.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "code",
                "message",
                "status"
              ]
            }
          }
        }
      },
      "CreateRegistration": {
        "description": "The base schema for the request body of a create registration.",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRegistrationResourceBody"
            }
          }
        }
      },
      "CreateRegistrationResourceBody": {
        "description": "The base schema for the resource in the body of a create registration.",
        "type": "object",
        "properties": {
          "preventKeyDeletion": {
            "description": "A boolean that determines whether Key Protect must prevent deletion of a root key.\n  \nIf set to `true`, Key Protect prevents deletion of the specified root key and its  associated protected resources. The system prevents the deletion of any key that  has at least one registration where `preventKeyDeletion` is `true`.",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "A text field that cloud services can use to store external metadata about the registration.  This field is exposed to customers when they review registered resources using GET /registrations.",
            "nullable": true,
            "type": "string",
            "minLength": 2,
            "maxLength": 240
          },
          "registrationMetadata": {
            "description": "A text field that cloud services can use to store internal metadata about the registration.  This field is not exposed to customers and is visible only with IBM Cloud service to service calls.",
            "nullable": true,
            "type": "string",
            "minLength": 2,
            "maxLength": 512
          }
        }
      },
      "ModifiableRegistrationResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRegistrationResourceBody"
          },
          {
            "type": "object",
            "properties": {
              "keyVersionId": {
                "description": "The ID of the key version that you want to register. This must be a version that is newer than the registered key version.",
                "nullable": true,
                "type": "string"
              }
            }
          }
        ]
      },
      "UpdateRegistration": {
        "description": "The base schema for the request body of a update registration.",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModifiableRegistrationResourceBody"
            }
          }
        }
      },
      "ReplaceRegistration": {
        "description": "The base schema for the request body of a replace registration.",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "resources": {
            "description": "A collection of resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplaceRegistrationResourceBody"
            }
          }
        }
      },
      "ReplaceRegistrationResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModifiableRegistrationResourceBody"
          },
          {
            "type": "object",
            "required": [
              "description",
              "preventKeyDeletion",
              "keyVersionId",
              "registrationMetadata"
            ]
          }
        ]
      },
      "CloudResourceName": {
        "description": "The object that contains information about the Cloud Resource Name",
        "type": "object",
        "properties": {
          "resourceCrn": {
            "description": "The [Cloud Resource Name](https://cloud.ibm.com/docs/overview?topic=overview-crn) (CRN) that uniquely identifies your cloud resources.",
            "type": "string",
            "example": "crn:v1:bluemix:public:cloud-object-storage:global:a/<account-id>:<service-instance>:bucket:<bucket-name>"
          }
        }
      }
    },
    "requestBodies": {
      "CreateKeyBody": {
        "description": "The base request for creating a new key.",
        "required": true,
        "content": {
          "application/vnd.ibm.kms.key+json": {
            "schema": {
              "$ref": "#/components/schemas/CreateKeyOneOf"
            },
            "examples": {
              "CreateRootKey": {
                "$ref": "#/components/examples/CreateRootKey"
              },
              "ImportRootKey": {
                "$ref": "#/components/examples/ImportRootKey"
              },
              "ImportRootKeyWithImportToken": {
                "$ref": "#/components/examples/ImportRootKeyWithImportToken"
              }
            }
          }
        }
      },
      "KeyActionBody": {
        "description": "The base request for key actions.",
        "required": true,
        "content": {
          "application/vnd.ibm.kms.key_action+json": {
            "schema": {
              "$ref": "#/components/schemas/KeyActionOneOf"
            },
            "examples": {
              "WrapKey": {
                "$ref": "#/components/examples/WrapKey"
              },
              "UnwrapKey": {
                "$ref": "#/components/examples/UnwrapKey"
              },
              "RewrapKey": {
                "$ref": "#/components/examples/RewrapKey"
              },
              "RotateKey": {
                "$ref": "#/components/examples/RotateKey"
              },
              "SecureRotateKey": {
                "$ref": "#/components/examples/SecureRotateKey"
              }
            }
          }
        }
      },
      "KeyCreateUpdatePolicyBody": {
        "description": "The base request for key policy create or update.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SetKeyPoliciesOneOf"
            },
            "examples": {
              "policies": {
                "$ref": "#/components/examples/SetMultipleKeyPolicies"
              },
              "dualAuthDelete": {
                "$ref": "#/components/examples/SetKeyPolicyDualAuthDelete"
              },
              "rotation": {
                "$ref": "#/components/examples/SetKeyPolicyRotation"
              }
            }
          }
        }
      },
      "InstanceCreateUpdatePolicyBody": {
        "description": "The base request for the create or update of instance level policies.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SetInstancePoliciesOneOf"
            },
            "examples": {
              "policies": {
                "$ref": "#/components/examples/SetMultipleInstancePolicies"
              },
              "dualAuthDelete": {
                "$ref": "#/components/examples/SetInstancePolicyDualAuthDelete"
              },
              "allowedNetwork": {
                "$ref": "#/components/examples/SetInstancePolicyAllowedNetwork"
              }
            }
          }
        }
      },
      "CreateImportTokenBody": {
        "description": "The base request for creating an import token.",
        "content": {
          "application/vnd.ibm.kms.import_token+json": {
            "schema": {
              "$ref": "#/components/schemas/ImportToken"
            }
          }
        },
        "required": true
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request is missing a required field.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorCollection",
              "example": {
                "metadata": {
                  "collectionType": "application/vnd.ibm.kms.error+json",
                  "collectionTotal": 1
                },
                "resources": [
                  {
                    "errorMsg": "Bad Request: The request is missing a required field."
                  }
                ]
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Your credentials are invalid or do not have the necessary permissions to make this request. Verify that the  given IBM Cloud access token and instance ID are correct. If the error persists, contact the account owner to check your permissions.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorCollection"
            },
            "example": {
              "metadata": {
                "collectionType": "application/vnd.ibm.kms.error+json",
                "collectionTotal": 1
              },
              "resources": [
                "errorMsg: 'Unauthorized: Your credentials are invalid or do not have the necessary permissions to make this request. Verify that the given IBM Cloud access token and instance ID are correct. If the error  persists, contact the account owner to check your permissions.'"
              ]
            }
          }
        }
      },
      "Forbidden": {
        "description": "Your service is not authorized to make this request. Ensure that an authorization exists between your service  and Key Protect. [Learn more](https://cloud.ibm.com/docs/key-protect?topic=key-protect-integrate-services#grant-access)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorCollection"
            },
            "example": {
              "metadata": {
                "collectionType": "application/vnd.ibm.kms.error+json",
                "collectionTotal": 1
              },
              "resources": [
                "errorMsg: 'Your service is not authorized to make this request. Ensure that an authorization exists  between your service and Key Protect. [Learn more](https://cloud.ibm.com/docs/key-protect?topic=key-protect-integrate-services#grant-access)'"
              ]
            }
          }
        }
      },
      "ForbiddenRegistration": {
        "description": "You are not authorized to make this request due to [missing authorization](https://cloud.ibm.com/docs/key-protect?topic=key-protect-integrate-services#grant-access) between the service instance and Key Protect instance, requiring a service-to-service call, or a mismatch between the cloud service CRN and the resource CRN.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorCollectionWithReason"
            },
            "example": {
              "metadata": {
                "collectionType": "application/vnd.ibm.kms.error+json",
                "collectionTotal": 1
              },
              "resources": [
                {
                  "errorMsg": "Caller is not authorized to make this request.",
                  "reasons": [
                    {
                      "code": "RESOURCE_OWNER_ERR",
                      "message": "The resource queried does not belong to the service.",
                      "status": 403,
                      "moreInfo": "https://cloud.ibm.com/apidocs/key-protect"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "The key could not be found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorCollection"
            },
            "example": {
              "metadata": {
                "collectionType": "application/vnd.ibm.kms.error+json",
                "collectionTotal": 1
              },
              "resources": [
                {
                  "errorMsg": "Not Found: The key could not be found."
                }
              ]
            }
          }
        }
      },
      "Gone": {
        "description": "The requested key was previously deleted and is no longer available. Please delete references to this key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorCollection"
            },
            "example": {
              "metadata": {
                "collectionType": "application/vnd.ibm.kms.error+json",
                "collectionTotal": 1
              },
              "resources": [
                "errorMsg: 'Gone: The requested key was previously deleted and is no longer available. Please delete  references to this key.'"
              ]
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too many requests. Please wait a few minutes and try again.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorCollection"
            },
            "example": {
              "metadata": {
                "collectionType": "application/vnd.ibm.kms.error+json",
                "collectionTotal": 1
              },
              "resources": [
                {
                  "errorMsg": "Too Many Requests: Please wait a few minutes and try again."
                }
              ]
            }
          }
        }
      },
      "InternalServerError": {
        "description": "IBM Key Protect is currently unavailable. Your request could not be processed. Please try again later. \n    \nIf the problem persists, note the `correlation-ID` in the response header and contact [IBM Cloud support](https://watson.service-now.com/wcp).",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorCollection"
            },
            "example": {
              "metadata": {
                "collectionType": "application/vnd.ibm.kms.error+json",
                "collectionTotal": 1
              },
              "resources": [
                "errorMsg: 'Internal Server Error: IBM Key Protect is currently unavailable. Your request could not be  processed. Please try again later.'"
              ]
            }
          }
        }
      }
    },
    "examples": {
      "CreateRootKey": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.key+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "type": "application/vnd.ibm.kms.key+json",
              "name": "Root-key",
              "description": "...",
              "extractable": false
            }
          ]
        }
      },
      "ImportRootKey": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.key+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "type": "application/vnd.ibm.kms.key+json",
              "name": "Imported-root-key",
              "description": "...",
              "extractable": false,
              "payload": "..."
            }
          ]
        }
      },
      "ImportRootKeyWithImportToken": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.key+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "type": "application/vnd.ibm.kms.key+json",
              "name": "Encrypted-root-key",
              "description": "...",
              "extractable": false,
              "payload": "...",
              "encryptionAlgorithm": " ",
              "encryptedNonce": "...",
              "iv": "..."
            }
          ]
        }
      },
      "WrapKey": {
        "summary": "Wrap key",
        "value": {
          "plaintext": "<data_key>",
          "aad": [
            "<additional_data>",
            "<additional_data>"
          ]
        }
      },
      "UnwrapKey": {
        "summary": "Unwrap key",
        "value": {
          "ciphertext": "<encrypted_data_key>",
          "aad": [
            "<additional_data>",
            "<additional_data>"
          ]
        }
      },
      "RewrapKey": {
        "summary": "Rewrap key",
        "value": {
          "ciphertext": "<encrypted_data_key>",
          "aad": [
            "<additional_data>",
            "<additional_data>"
          ]
        }
      },
      "RotateKey": {
        "summary": "Rotate key",
        "value": {
          "payload": "<new_key>"
        }
      },
      "SecureRotateKey": {
        "summary": "Rotate key using an import token",
        "value": {
          "payload": "<encrypted_key>",
          "encryptionAlgorithm": "RSAES_OAEP_SHA_256",
          "encryptedNonce": "...",
          "iv": "..."
        }
      },
      "GetKeyPolicyRotation": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "id": "...",
              "crn": "...",
              "rotation": {
                "interval_month": 3
              },
              "createdBy": "...",
              "creationDate": "...",
              "updatedBy": "...",
              "lastUpdateDate": "..."
            }
          ]
        }
      },
      "GetMultipleKeyPolicies": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 2
          },
          "resources": [
            {
              "id": "...",
              "crn": "...",
              "rotation": {
                "interval_month": 3
              },
              "createdBy": "...",
              "creationDate": "...",
              "updatedBy": "...",
              "lastUpdateDate": "..."
            },
            {
              "id": "...",
              "crn": "...",
              "dualAuthDelete": {
                "enabled": "<true|false>"
              },
              "createdBy": "...",
              "creationDate": "...",
              "updatedBy": "...",
              "lastUpdateDate": "..."
            }
          ]
        }
      },
      "GetKeyPolicyDualAuthDelete": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "id": "...",
              "crn": "...",
              "dualAuthDelete": {
                "enabled": "<true|false>"
              },
              "createdBy": "...",
              "creationDate": "...",
              "updatedBy": "...",
              "lastUpdateDate": "..."
            }
          ]
        }
      },
      "GetMultipleInstancePolicies": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "policy_type": "dualAuthDelete",
              "policy_data": {
                "enabled": "<true|false>"
              },
              "createdBy": "...",
              "creationDate": "...",
              "updatedBy": "...",
              "lastUpdated": "..."
            },
            {
              "policy_type": "allowedNetwork",
              "policy_data": {
                "enabled": "<true|false>",
                "attributes": {
                  "allowed_network": "<private-only|public-and-private>"
                }
              },
              "createdBy": "...",
              "creationDate": "...",
              "updatedBy": "...",
              "lastUpdated": "..."
            }
          ]
        }
      },
      "GetInstancePolicyDualAuthDelete": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "policy_type": "dualAuthDelete",
              "policy_data": {
                "enabled": "<true|false>"
              },
              "createdBy": "...",
              "creationDate": "...",
              "updatedBy": "...",
              "lastUpdated": "..."
            }
          ]
        }
      },
      "SetKeyPolicyRotation": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "type": "application/vnd.ibm.kms.policy+json",
              "rotation": {
                "interval_month": 1
              }
            }
          ]
        }
      },
      "SetKeyPolicyDualAuthDelete": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "type": "application/vnd.ibm.kms.policy+json",
              "dualAuthDelete": {
                "enabled": "<true|false>"
              }
            }
          ]
        }
      },
      "SetMultipleKeyPolicies": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 2
          },
          "resources": [
            {
              "type": "application/vnd.ibm.kms.policy+json",
              "rotation": {
                "interval_month": 1
              }
            },
            {
              "type": "application/vnd.ibm.kms.policy+json",
              "dualAuthDelete": {
                "enabled": "<true|false>"
              }
            }
          ]
        }
      },
      "SetKeyPolicyRotationResponse": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "type": "application/vnd.ibm.kms.policy+json",
              "rotation": {
                "interval_month": 1
              }
            }
          ]
        }
      },
      "SetKeyPolicyDualAuthDeleteResponse": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "type": "application/vnd.ibm.kms.policy+json",
              "dualAuthDelete": {
                "enabled": "<true|false>"
              }
            }
          ]
        }
      },
      "SetMultipleInstancePolicies": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "policy_type": "dualAuthDelete",
              "policy_data": {
                "enabled": "<true|false>"
              }
            }
          ]
        }
      },
      "SetInstancePolicyDualAuthDelete": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "policy_type": "dualAuthDelete",
              "policy_data": {
                "enabled": "<true|false>"
              }
            }
          ]
        }
      },
      "SetInstancePolicyAllowedNetwork": {
        "value": {
          "metadata": {
            "collectionType": "application/vnd.ibm.kms.policy+json",
            "collectionTotal": 1
          },
          "resources": [
            {
              "policy_type": "networkAllowed",
              "policy_data": {
                "enabled": "<true|false>",
                "allowed_network": "<public-and-private|private-only>"
              }
            }
          ]
        }
      }
    }
  }
}